{"version":3,"sources":["logic/Recorder.ts","logic/util/Worklet.ts","logic/AudioManager.ts","logic/AudioSnapshot.ts","logic/SoundContext.ts","logic/util/Math.ts","components/generic/InactiveDisplay.tsx","components/SampleComponent.tsx","components/recorder/SoundGraph.tsx","components/recorder/Recorder.tsx","components/AlertDismissable.tsx","components/midi-mouth/MidiMouthForm.tsx","components/midi-mouth/MidiMComp.tsx","components/tuner/Tuner.tsx","logic/Float32Buffer.ts","components/generic/LoadingDisplay.tsx","components/tuner/TunerDisplay.tsx","routes/MidiMouth.tsx","components/generic/DshbComp.tsx","components/Dashboard.tsx","components/Sidebar.tsx","routes/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Recorder","fs","recording","this","data","push","Array","from","createEssentiaNode","audioCtx","workletJsPath","nodeName","a","console","log","audioWorklet","addModule","credentials","AudioWorkletNode","emptyBuffer","Float32Array","AudioManager","audioContext","_nodes","nodeConnections","analyser","source","audioStream","_timeBuffer","_freqBuffer","_recorder","audioActive","FFT_SIZE","SAMPLE_RATE","BUFFER_SIZE","addSourceNode","MediaStreamAudioSourceNode","mediaStream","addNode","outputs","window","AudioContext","sampleRate","analyzer","AnalyserNode","fftSize","active","navigator","mediaDevices","getUserMedia","audio","video","getTracks","every","track","enabled","forEach","getTimeData","bind","getFreqData","initAudio","bigIfTrue","getFloatTimeDomainData","getFloatFrequencyData","node","key","conn","nodeExists","Error","inputs","inputKey","connectNodes","outputKey","srcNodeKey","dstNodeKey","connect","name","js_path","onMessage","port","onmessage","AudioSnapshot","soundData","freqData","_soundData","length","copy","emptySnapshot","SoundContext","React","createContext","roundNum","value","places","multiplier","Math","pow","round","getRMS","signal","squareMean","reduce","acc","val","sqrt","getAmplitude","arr","max","min","L2","L440","InactiveDisplay","props","className","SampleComponent","Consumer","snapshot","hasSoundData","SoundGraph","movement_timer","canvasRef","useRef","containerRef","useState","dimensions","setDimensions","test_dimensions","current","width","offsetWidth","height","offsetHeight","useLayoutEffect","addEventListener","clearInterval","setTimeout","displayGraph","isRecording","canvas","getContext","setAttribute","toString","context","audioData","x","sliceWidth","strokeStyle","sample","i","y","r","fillRect","draw","ref","icons","recordOn","size","recordOff","pauseOn","pauseOff","RecorderComponent","setIsRecording","intervalId","setIntervalId","recordingIcon","updateTimeData","timeData","audioManager","updateSoundData","updatePeriod","useEffect","interval","setInterval","onClick","newRecordingState","startRecording","stopRecording","undefined","AlertDismissable","show","setShow","variant","Alert","onClose","dismissible","Heading","header","message","formatName","id","prefix","trim","RequestStatus","MidiMouthForm","songOptions","instrumentOptions","sourceSongs","setSourceSongs","instruments","setInstruments","songChoice","setSongChoice","instrumentChoice","setInstrumentChoice","userSoundFile","setUserSoundFile","keyShift","setKeyShift","loading","setLoading","errMsg","setErrMsg","allInstrumentsKey","allowInstruments","Object","entries","map","songId","songName","instrId","instrName","formData","FormData","append","keys","params","String","paramString","join","queryString","apiRoot","fetch","method","body","headers","accept","then","res","json","result","setOutputSong","error","Form","onSubmit","event","preventDefault","sendSongRequest","InputGroup","Text","Control","type","onChange","e","target","files","Select","disabled","selected","Accordion","Item","eventKey","Header","Body","evt","placeholder","Check","label","Button","API_URL","TunerState","MidiM","forwardRef","style","children","outputSongUrl","setOutputSongUrl","None","songUrl","Card","href","url","config","file","forceAudio","controls","Float32Buffer","bufferSize","_bufferSize","_buffer","startIdx","sum","sorted","slice","sort","floor","LoadingDisplay","TunerDisplay","targetNote","empty","tuning","note","spanClass","isNaN","pitch","freq","tuning_options","tunings","noteTunings","notes","Note","get","filterValidTunings","getClosestTuningNote","inputFreq","noteDists","midi","abs","Number","MAX_SAFE_INTEGER","argmin","indexOf","Tuner","content","NaN","setPitch","setPitchBuffer","setTargetNote","targetRefreshFlag","setTargetRefreshFlag","INACTIVE","compState","setCompState","onWorkletMsg","newPitch","parseFloat","pitchBuffer","addWorklet","LOADING","ACTIVE","OTHER_ERR","timer","flag","clearTimeout","DashboardComponent","ReactGridLayout","WidthProvider","RGL","gridProps","rowHeight","cols","verticalCompact","isBounded","onLayoutChange","recorderLayout","w","h","static","tunerLayout","components","element","layout","midiMouth","Dashboard","audioSnapshot","setAudioSnapshot","useMemo","Provider","menuClosed","menuOpen","library","settings","sourceCode","contact","login","logout","midimouth","Sidebar","isMobile","isClosed","setIsClosed","useAuth0","loginWithRedirect","isAuthenticated","title","openCloseIcon","onLibaryClick","onSettingsClick","collapsed","iconShape","icon","to","returnTo","location","origin","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","MidiMouth","ReactPlayer","canPlay","ReactDOM","render","domain","clientId","redirectUri","audience","scope","path","document","getElementById"],"mappings":"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","file":"static/js/main.7c7fdf9e.chunk.js","sourcesContent":["\n\nclass Recorder {\n    public recording: Array<number>;\n    private fs: number;\n\n    constructor(fs: number) {\n        this.recording = [];\n        this.fs = fs;\n    }\n\n    addData(data: Float32Array) {\n        this.recording.push(...Array.from(data));\n    }\n\n    getRecording(): Array<number> {\n        return this.recording;\n    }\n\n    clearRecording() {\n        this.recording = [];\n    }\n}\n\nexport default Recorder;","// a set of business logic functions pertaining to worklets and multithreading\n\nexport type WorkletCallback = ((this: MessagePort, ev: MessageEvent<any>) => any);\n\n\n// returns an AudioNode linked to an worklet processing function\n// the function path is relative to the public directory and is \n// specified in the workletProcessorPath variable\nexport async function createEssentiaNode(\n  audioCtx: AudioContext, workletJsPath: string, nodeName: string\n): Promise<AudioWorkletNode> {\n  try {\n    // register the audio worker\n    console.log(\"registering worker\");\n    await audioCtx.audioWorklet.addModule(workletJsPath,\n      { credentials: 'omit' }\n    );\n  } catch (e) {\n    console.log(\"error adding worklet module:\" + e);\n  }\n\n  // instantiate our custom processor as an AudioWorkletNode\n  return new AudioWorkletNode(audioCtx, nodeName);\n}\n","import Recorder from \"./Recorder\";\nimport { createEssentiaNode, WorkletCallback } from \"./util/Worklet\";\n\n\n// A string-indexed list of nodes. Essentially a dict\ninterface INodes {\n  [key: string]: AudioNode;\n}\n\n// \ntype nodeKey = keyof INodes;\n\n// A string-indexed list of nodes. Essentially a dict\ninterface INodeConnections {\n  [src: nodeKey]: nodeKey;\n}\n\nconst emptyBuffer = new Float32Array(0);\n\n\n// TODO: Add recording loop in here instead of react components\n\nclass AudioManager {\n  // audio state and analysis\n  audioContext?: AudioContext;\n\n  _nodes: INodes; // essentially a dictionary of nodes\n  nodeConnections: INodeConnections;\n\n  analyser?: AnalyserNode | null;\n  source?: MediaStreamAudioSourceNode | null;\n  audioStream?: MediaStream | null;\n\n  _timeBuffer: Float32Array;\n  _freqBuffer: Float32Array;\n\n  _recorder: Recorder;\n\n  audioActive: boolean = false; // if we're actively processing audio\n  readonly FFT_SIZE = 2048; // num bins in fft -- real + image\n  readonly SAMPLE_RATE = 44100;\n  readonly BUFFER_SIZE = this.FFT_SIZE;\n\n  public get nodes() {\n    return this._nodes;\n  }\n\n\n  constructor() {\n    this._nodes = {};\n    this.nodeConnections = {};\n\n    this._timeBuffer = new Float32Array(this.FFT_SIZE);\n    this._freqBuffer = new Float32Array(this.FFT_SIZE / 2);\n\n    this._recorder = new Recorder(this.SAMPLE_RATE);\n  }\n\n  // Initializes the audio context and nodes. Must be called from a user gesture\n  //TODO: How to avoid re-doing this w/ every click?\n  private async initAudio(): Promise<boolean> {\n    // audio context must be created in a user gesture\n    if (this.audioContext == null) {\n      this.audioContext = new window.AudioContext({ sampleRate: this.SAMPLE_RATE });\n    }\n\n    // Initialize analyzer node\n\n    if (this._nodes['analyzer'] == null) {\n      let analyzer = new AnalyserNode(this.audioContext, { fftSize: this.FFT_SIZE });\n      this.addNode(analyzer, \"analyzer\");\n    }\n\n    if (this.audioStream == null || !this.audioStream?.active) {\n      this.audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n      this.addSourceNode();\n    } else if (this.audioStream?.getTracks().every((track) => track.enabled == false)) {\n      this.audioStream?.getTracks().forEach(track => track.enabled = true);\n    }\n\n\n    if (this._nodes['source'] == null) {\n      this.addSourceNode();\n    }\n\n    // Lets them be used in callbacks\n    this.getTimeData.bind(this);\n    this.getFreqData.bind(this);\n\n    return true;\n  }\n\n  /*\n  ==== Audio input ===== \n  */\n\n  async startRecording(): Promise<boolean> {\n    let bigIfTrue = await this.initAudio();\n    this.audioActive = bigIfTrue;\n    return bigIfTrue;\n  }\n\n\n  stopRecording(): void {\n    this.audioStream?.getTracks().forEach(track => track.enabled = false);\n    this.audioActive = false;\n  }\n\n\n  public getTimeData(): Float32Array {\n    let analyzer = this._nodes['analyzer'];\n    if (analyzer instanceof AnalyserNode) {\n      // TODO: this has weird behavior... doesn't always output right thing\n      analyzer.getFloatTimeDomainData(this._timeBuffer);\n      return this._timeBuffer;\n    }\n    return emptyBuffer;\n  }\n\n  public getFreqData(): Float32Array {\n    let analyzer = this._nodes['analyzer'];\n    if (analyzer instanceof AnalyserNode) {\n      analyzer.getFloatFrequencyData(this._freqBuffer);\n      return this._freqBuffer;\n    }\n    return emptyBuffer;\n  }\n\n\n  /*\n  ==== Audio graph structure ===== \n  */\n\n  public addNode(node: AudioNode, key: string, conn?: { inputs?: string[], outputs?: string[] }) {\n    if (this.nodeExists(key)) {\n      throw new Error(\"Key already exists in audio graph\");\n    }\n    this._nodes[key] = node;\n\n    // connect the inputs for this node to it\n    if (conn?.inputs) {\n      conn.inputs.forEach((inputKey) => this.connectNodes(inputKey, key));\n    }\n\n    // connect this node to the ones it outputs to\n    if (conn?.outputs) {\n      conn.outputs.forEach((outputKey) => this.connectNodes(key, outputKey));\n    }\n  }\n\n  public nodeExists(key: string) {\n    return key in this._nodes;\n  }\n\n  // conencts two audio nodes -- true on success\n  private connectNodes(srcNodeKey: nodeKey, dstNodeKey: nodeKey) {\n    if (!(srcNodeKey in this._nodes) && !(dstNodeKey in this._nodes)) {\n      throw new Error(\"At least one provided key is invalid\");\n    }\n\n    this._nodes[srcNodeKey].connect(this._nodes[dstNodeKey]);\n    this.nodeConnections[srcNodeKey] = dstNodeKey;\n  }\n\n\n  private addSourceNode = () => {\n    if (this.audioContext && this.audioStream) {\n      let source = new MediaStreamAudioSourceNode(this.audioContext, { mediaStream: this.audioStream });\n      this.addNode(source, \"source\", { outputs: [\"analyzer\"] });\n    }\n  }\n\n  // Create a worklet node from a AudioWorkletProcessor specified by js_path and connect the \n  // source node to it so it reads from the microphone.\n  // can attach additional event listeners to the AudioWorkletNode\n  public async addWorklet(name: string, js_path: string, onMessage: WorkletCallback) {\n    // don't add the same node twice, nor to a null context\n    if (!this.audioContext || this.nodeExists(name)) {\n      console.log(\"Can't add worklet - \" +\n        (this.audioContext ? \"Node exists\" : \"Audio context null\")\n      );\n      return;\n    }\n\n    // create the node and add it to the graph\n    try {\n      const node = await createEssentiaNode(this.audioContext!, js_path, name);\n      node.port.onmessage = onMessage;\n\n      this.addNode(node, name, { inputs: [\"source\"] });\n    } catch (e) {\n      console.log(\"Error adding worklet node:\" + e);\n    }\n  }\n\n}\n\nexport default AudioManager;","// a segment of an audio stream\n\nclass AudioSnapshot {\n    public _soundData?: Float32Array;\n    public freqData?: Float32Array;\n    // public isRecording: boolean;\n\n    // constructor();\n    // constructor(audioSnapshot: AudioSnapshot);\n    // constructor(soundData: Float32Array, freqData?: Float32Array);\n    // constructor(audioSnapshot?: any, soundData?: Float32Array, freqData?: Float32Array) {\n    //     if (audioSnapshot) {\n    //         console.log(\"passed snapshot\");\n    //         this.soundData = audioSnapshot.soundData;\n    //         this.freqData = audioSnapshot.freqData;\n    //     } else {\n    //         this.soundData = soundData ?? new Float32Array(0);\n    //         this.freqData = freqData;\n    //     }\n    // }\n\n    constructor(soundData?: Float32Array, freqData?: Float32Array) {\n        this._soundData = soundData;\n        this.freqData = freqData;\n        // this.isRecording = false;\n    }\n\n    get soundData() {\n      return this._soundData ?? new Float32Array(0);\n    }\n\n    hasSoundData() {\n        return this._soundData && this._soundData.length > 0;\n    }\n\n    setSoundData(soundData: Float32Array, copy: boolean = true) {\n        if (copy) {\n            this._soundData = new Float32Array(soundData);\n        }\n        else {\n            this._soundData = soundData;\n        }\n    }\n\n    setFreqData(freqData: Float32Array, copy: boolean = true) {\n        if (copy) {\n            this.freqData = new Float32Array(freqData);\n        }\n        else {\n            this.freqData = freqData;\n        }\n    }\n\n}\nexport default AudioSnapshot;\n\nexport const emptySnapshot = new AudioSnapshot(new Float32Array(0));\n\n","import React from \"react\";\nimport AudioSnapshot from \"./AudioSnapshot\";\n\nconst emptySnapshot = new AudioSnapshot(new Float32Array(0));\nconst SoundContext = React.createContext(emptySnapshot);\n\nexport default SoundContext;","export function roundNum(value: number, places: number) {\n  var multiplier = Math.pow(10, places);\n\n  return (Math.round(value * multiplier) / multiplier);\n}\n\nexport function getRMS(signal: Float32Array): number {\n  let squareMean = signal.reduce((acc, val) => acc + val * val, 0) / signal.length;\n  return Math.sqrt(squareMean);\n}\n\nexport function getAmplitude(signal: Float32Array): number {\n  let arr = Array.from(signal);\n  return Math.max(...arr) - Math.min(...arr);\n}\n\n\n// https://tonaljs.github.io/tonal/packages_note_build_es5.js.html#line237\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\nexport function freqToMidi(freq: number): number {\n  return (12 * (Math.log(freq) - L440)) / L2 + 69;\n};\n","import { FunctionComponent } from \"react\";\n\ninterface InactiveDisplayProps {\n  onClick?: () => void;\n}\n\nconst InactiveDisplay: FunctionComponent<InactiveDisplayProps> = (props: InactiveDisplayProps) => {\n  return (<div className=\"inactive-display\"> Press Play! </div>);\n}\n\nexport default InactiveDisplay;","import { FunctionComponent } from \"react\";\n\nimport SoundContext from \"../logic/SoundContext\";\nimport { getRMS, getAmplitude, roundNum } from \"../logic/util/Math\";\nimport { IDashboardComponentProps } from \"./generic/DshbComp\";\nimport InactiveDisplay from \"./generic/InactiveDisplay\";\n\ninterface SampleComponentProps extends IDashboardComponentProps {\n  text?: string;\n}\n\nconst SampleComponent: FunctionComponent<SampleComponentProps> = (props: SampleComponentProps) => {\n    return (\n        <div className=\"simple-component\">\n          <h4>Sound Stats</h4>\n          <SoundContext.Consumer>\n            {\n              snapshot =>\n                snapshot.hasSoundData() ?\n                  <div>\n                    RMS: {roundNum(getRMS(snapshot.soundData), 3)}\n                    <br />\n                    Amplitude: {roundNum(getAmplitude(snapshot.soundData), 3)}\n                  </div>\n                  :\n                  <InactiveDisplay />\n                \n            }\n          </SoundContext.Consumer>\n        </div>\n    );\n  }\nexport default SampleComponent;","import { FunctionComponent, useLayoutEffect, useRef, useState } from \"react\";\n\n\ninterface ISoundGraphProps {\n  soundData: Float32Array;\n  isRecording: boolean;\n}\n\ninterface IDimensions {\n  width: number;\n  height: number;\n}\n\n\nfunction draw(context: CanvasRenderingContext2D, audioData: Float32Array,\n  width: number, height: number\n) {\n  let x = 0;\n  const sliceWidth = width / audioData.length;\n\n  context.strokeStyle = '#ffffff';\n\n  // TODO: run a gaussian filter or smtn\n  audioData.forEach((sample, i) => {\n    let sampleHeight = sample * height/2;\n    let y = sampleHeight + height/2;\n\n    let r = sliceWidth * 5;\n    context.fillRect(x, y, r, r );\n\n    x += sliceWidth;\n  });\n}\n\nconst SoundGraph: FunctionComponent<ISoundGraphProps> = (props: ISoundGraphProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n\n  const [dimensions, setDimensions] = useState<IDimensions>();\n\n\n  //TODO: Dimensions still don't update right when the canvas\n  // is being drawn and the window gets large than smaller\n\n  // holds the timer for setTimeout and clearInterval\n  let movement_timer: NodeJS.Timer;\n\n  // the number of ms the window size must stay the same size before the\n  // dimension state variable is reset\n  const RESET_TIMEOUT = 100;\n\n  const test_dimensions = () => {\n    if (containerRef.current) {\n      setDimensions({\n        width: containerRef.current.offsetWidth,\n        height: containerRef.current.offsetHeight\n      });\n    }\n  }\n\n  // This sets the dimensions on the first render\n  useLayoutEffect(() => {\n    test_dimensions();\n  }, []);\n\n  // every time the window is resized, the timer is cleared and set again\n  // the net effect is the component will only reset after the window size\n  // is at rest for the duration set in RESET_TIMEOUT.  This prevents rapid\n  // redrawing of the component for more complex components such as charts\n  window.addEventListener('resize', () => {\n    clearInterval(movement_timer);\n    if (!movement_timer) {\n      // clearInterval(movement_timer);\n\n      movement_timer = setTimeout(test_dimensions, RESET_TIMEOUT);\n    }\n  });\n\n\n\n  // Redraw canvas on new sound data\n  let displayGraph = props.isRecording && dimensions != null;\n  useLayoutEffect(() => {\n    if (displayGraph) {\n      let { width, height } = dimensions!;\n      const canvas = canvasRef.current?.getContext('2d');\n\n      if (canvas != null) {\n        canvasRef.current!.setAttribute(\"width\", width.toString());\n        canvasRef.current!.setAttribute(\"height\", height.toString());\n        draw(canvas, props.soundData, width, height);\n      }\n    }\n  }, [dimensions?.width, dimensions?.height, props.soundData[0], displayGraph]);\n\n\n\n  return (\n    <div className=\"timeDomGraph\" ref={containerRef}>\n      { // draw if width and height are set\n        displayGraph &&\n        <canvas ref={canvasRef} width={dimensions!.width} height={dimensions!.height} />\n      }\n    </div>\n  );\n}\n\nexport default SoundGraph;","import { FunctionComponent, useEffect, useState } from \"react\";\n\nimport { TiMediaRecord, TiMediaRecordOutline, TiMediaPauseOutline, TiMediaPlayOutline } from \"react-icons/ti\";\nimport AudioManager from \"../../logic/AudioManager\";\nimport SoundContext from \"../../logic/SoundContext\";\nimport SoundGraph from \"./SoundGraph\";\n\n\nconst icons = {\n  recordOn: <TiMediaRecord size={100} />,\n  recordOff: <TiMediaRecordOutline size={100} />,\n  pauseOn: <TiMediaPlayOutline size={100} />,\n  pauseOff: <TiMediaPauseOutline size={100} />\n};\n\n\nexport interface IRecorderProps {\n  audioManager: AudioManager;\n  updateSoundData: (data?: Float32Array) => void;\n}\n\nconst RecorderComponent: FunctionComponent<IRecorderProps> = (props: IRecorderProps) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout>();\n\n  // display properties\n  let recordingIcon = isRecording ? icons.recordOn : icons.recordOff;\n\n  // recording start/stop callback\n  let onRecordClick = () => {\n    let newRecordingState = !isRecording;\n    // Recording!\n    if (newRecordingState) {\n      props.audioManager.startRecording();\n      console.log(\"\\n\\nstarted\\n\")\n    }\n    // Not recording\n    else {\n      props.audioManager.stopRecording();\n      props.updateSoundData(undefined);\n      console.log(\"\\n\\nstopped\\n\")\n    }\n    setIsRecording(newRecordingState);\n  };\n\n\n  const updateTimeData = () => {\n    let timeData = new Float32Array(props.audioManager.getTimeData());\n    props.updateSoundData(timeData);\n  };\n\n  let updatePeriod = props.audioManager.FFT_SIZE / props.audioManager.SAMPLE_RATE;\n\n  // start timer when record is hit -- stop it once is record is off\n  useEffect(() => {\n    if (isRecording) {\n      const interval = setInterval(updateTimeData, updatePeriod);\n      setIntervalId(interval);\n    }\n    else if (intervalId != null) {\n      clearInterval(intervalId);\n    }\n  }, [isRecording]);\n\n\n  // could use key={soundData[0]} and other keys to only rerender sound graph\n  return (\n    <div className=\"recorder\">\n      <div className=\"recorder-controls\">\n        <div onClick={onRecordClick}>{recordingIcon}</div>\n      </div>\n\n      <SoundContext.Consumer>\n        {\n          snapshot =>\n            snapshot.hasSoundData() &&\n            <SoundGraph soundData={snapshot.soundData} isRecording={isRecording} />\n        }\n      </SoundContext.Consumer>\n    </div>\n  );\n}\n\nexport default RecorderComponent;","import { FunctionComponent, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\ninterface IAlertDismissableProps {\n    header: string;\n    message: string;\n    closeMessage?: string;\n    variant?: \"success\" | \"danger\" | \"warning\" | \"info\";\n}\n\nconst AlertDismissable: FunctionComponent<IAlertDismissableProps> = (props: IAlertDismissableProps) => {\n    const [show, setShow] = useState(true);\n    let variant = props.variant || \"success\";\n\n    return (\n        <>\n            <Alert show={show} variant={variant} \n            onClose={() => setShow(false)} \n            dismissible={true}\n            >\n                <Alert.Heading>{props.header}</Alert.Heading>\n                {props.message}\n            </Alert>\n        </>\n    );\n}\n\nexport default AlertDismissable;","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { Accordion, Button, Card, Form, FormControl, InputGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport AlertDismissable from \"../AlertDismissable\";\n\ninterface MidiMouthFormProps {\n  apiRoot: string;\n  setOutputSong: (outputSongURL: string) => void;\n}\n\n\nfunction formatName(name: string, id: string, prefix?: string): string {\n  name = name.trim();\n  if (name.length === 0) {\n    name = id;\n    if (prefix) {\n      name = prefix + \" \" + name;\n    }\n  }\n  return name;\n}\n\nconst renderTooltip = (text: string, options: any) => (\n  <Tooltip id=\"button-tooltip\" {...options}>\n    Simple tooltip\n  </Tooltip>\n);\n\nconst MidiMouthForm: FunctionComponent<MidiMouthFormProps> = (props: MidiMouthFormProps) => {\n  const [sourceSongs, setSourceSongs] = useState<Object>();\n  const [instruments, setInstruments] = useState<Object>();\n\n  const [songChoice, setSongChoice] = useState<string>();\n  const [instrumentChoice, setInstrumentChoice] = useState<string>();\n  const [userSoundFile, setUserSoundFile] = useState<any>()\n  const [keyShift, setKeyShift] = useState<number>(0);\n  const [allTracksChoice, setAllTracksChoice] = useState<boolean>();\n\n  const [loading, setLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState<string>(\"\");\n\n  // let ifSongChosenProps = {'d'}\n  let allInstrumentsTitle = \"All Instruments\";\n  let allInstrumentsKey = \"-1\"\n  let allowInstruments: boolean = songChoice != null && instruments != null;\n  let allInstrsSelected = instrumentChoice == \"\";\n\n  let songOptions, instrumentOptions;\n\n  if (sourceSongs) {\n    let entries = Object.entries(sourceSongs!);\n    songOptions = entries.map(\n      ([songId, songName]) => <option value={songId}>{formatName(songName, songId, \"Song\")}</option>\n    );\n  }\n  if (instruments) {\n    let entries = Object.entries(instruments!);\n    instrumentOptions = entries.map(\n      ([instrId, instrName]) => <option value={instrId}>{formatName(instrName, instrId, \"Instrument\")}</option>);\n  }\n\n\n  // Load song options\n  useEffect(() => {\n    fetch(props.apiRoot + \"get_songs\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          setSourceSongs(result);\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      );\n  }, []);\n\n  // Load instrument options\n  useEffect(() => {\n    if (songChoice == null || sourceSongs == null) return;\n    // reset instrument selection\n    setInstrumentChoice(allInstrumentsKey);\n\n    // get new instruments\n    // console.log(\"Fetching instruments for: \" + sourceSongs[songChoice]);\n    fetch(props.apiRoot + \"get_instruments?song_id=\" + songChoice)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          setInstruments(result);\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      );\n  }, [songChoice]);\n\n  // Send song generation request\n  async function sendSongRequest() {\n    var formData = new FormData();\n    formData.append('user_sample', userSoundFile);\n    console.log(\"formdata: \", Array.from(formData.keys()));\n\n    let params:{ [key: string]: string  }= {\n      \"song_id\": songChoice!,\n      \"instrument_num\": instrumentChoice!,\n      \"key_shift\": keyShift.toString(),\n      \"all_tracks\": String(instrumentChoice == allInstrumentsKey)\n    };\n\n    setLoading(true);\n    let paramString = Object.keys(params).map(key => key + \"=\" + String(params[key])).join(\"&\");\n    let queryString = props.apiRoot + \"create_song\" + \"?\" + paramString;\n    console.log(\"fetching: \" + queryString);\n    fetch(queryString, {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        accept: \"application/json\",\n        // \"Content-Type\": \"multipart/form-data\"\n      },\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          props.setOutputSong(result['song'])\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      ).then(() => { setLoading(false); });\n  }\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    console.log(\"submitting\");\n    if (!userSoundFile) {\n      setErrMsg(\"Please select a sound file.\");\n      console.log(\"no file selected\");\n      return;\n    } else {\n      console.log(\"file: \" + userSoundFile);\n    }\n    sendSongRequest();\n  }\n\n\n  return (\n    <div className=\"midi-form\">\n      <Form onSubmit={handleSubmit}>\n        {errMsg.length > 0 && <AlertDismissable message={errMsg} variant=\"danger\" header=\"Error\" />}\n\n        {/* input sound */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>🎤</InputGroup.Text>\n          <Form.Control type=\"file\" size=\"lg\" accept=\".wav\"\n            onChange={(e:any) => setUserSoundFile(e.target?.files[0])} />\n        </InputGroup>\n\n\n        {/* song selection */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>🎼</InputGroup.Text>\n          <Form.Select size=\"lg\" onChange={(event: any) => setSongChoice(event.target.value)}>\n            <option disabled={true} selected={!songChoice}>Select a song</option>\n            {songOptions}\n          </Form.Select>\n        </InputGroup>\n\n        {/* instrument selection */}\n        <InputGroup className=\"mb-3\"  >\n          <InputGroup.Text>🎷</InputGroup.Text>\n          <Form.Select size=\"lg\"\n            value={instrumentChoice}\n            disabled={songChoice == null}\n            onChange={(event: any) => setInstrumentChoice(event.target.value)\n            }\n          >\n            {allowInstruments && (\n              <option value={allInstrumentsKey}>{allInstrumentsTitle}</option>\n            )}\n            {allowInstruments ?\n              instrumentOptions\n              : <option>Must select a song</option>}\n          </Form.Select>\n        </InputGroup>\n\n        {/* advanced options */}\n        <Accordion className=\"mb-3\">\n          <Accordion.Item eventKey=\"0\">\n            <Accordion.Header>Other Options</Accordion.Header>\n            <Accordion.Body className=\"midi-advanced-options\">\n\n              {/* key shift */}\n              <InputGroup className=\"mb-3\" onChange={(evt: any) => setKeyShift(evt.target.value)} >\n                <InputGroup.Text>Note Shift</InputGroup.Text>\n                <Form.Control type=\"number\" placeholder=\"0\" />\n              </InputGroup>\n\n              {/* key shift */}\n              <InputGroup className=\"mb-3\"  >\n                <Form.Check label=\"Include drums\" />\n              </InputGroup>\n\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n\n        {/* submit button */}\n        <div className=\"mb-3 text-center\" >\n          <Button variant=\"success\" size=\"lg\" type=\"submit\" disabled={loading}>\n            {loading ? \"Processing...\" : \"Create Song\"}\n          </Button>\n        </div>\n\n      </Form >\n    </div >\n  );\n}\n//  👄\nexport default MidiMouthForm;","import { forwardRef, FunctionComponent, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\nimport MidiMouthForm from \"./MidiMouthForm\";\nimport { IDashboardComponentProps } from \"../generic/DshbComp\";\n\n\n\nenum RequestStatus {\n    None,\n    Submitted,\n    Success,\n    Error\n}\n\nconst WELCOME_MESSAGE = \"Make a song with your voice! Choose a sound clip, song, and go!\";\nconst API_URL = \"https://bazamjam.uc.r.appspot.com/\";\n\nfunction downloadSong(song: string) {\n    const url = API_URL + \"download_song?song_id=\" + song;\n    fetch(url);\n    // window.open(url);\n}\n\n\nexport interface IMidiMProps extends IDashboardComponentProps {\n}\n\nconst MidiM: FunctionComponent<IMidiMProps> = forwardRef(({ className, style = {}, children, ...props }, ref) => {\n    const [outputSongUrl, setOutputSongUrl] = useState(\"\");\n    const [songCreationStatus, setSongCreationStatus] = useState(RequestStatus.None);\n\n    let songUrl = outputSongUrl;\n    \n    return (\n        \n        <div\n            {...props}\n            style={{ ...style }}\n            className={className + \" midicomp\"}\n            ref={ref as React.RefObject<HTMLDivElement>}\n        >\n            <div className=\"midi-main\">\n                <h1 className=\"midi-header\">Midi Mouth 🎶</h1>\n\n                <MidiMouthForm apiRoot={API_URL} setOutputSong={setOutputSongUrl} />\n                <hr />\n                {outputSongUrl.length > 0 && (\n                    <Card>\n                        <Card.Header>\n                            <h3>Your song is ready!</h3>\n                        </Card.Header>\n                        <Card.Body>\n                            <a href={songUrl}> Direct Link </a>\n                            <ReactPlayer url={songUrl} config={{ file: { forceAudio: true } }} controls={true}\n                                height={50} width={300} />\n                        </Card.Body>\n                    </Card>\n                )\n                }\n            </div>\n        </div>\n    );\n});\n\nexport default MidiM;","// a react component representing a tuner\n\nimport { Note as NoteType, NoNote } from \"@tonaljs/core\";\nimport { Note, NoteLiteral } from \"@tonaljs/tonal\";\nimport { forwardRef, FunctionComponent, useEffect, useState } from \"react\";\n\nimport AudioManager from \"../../logic/AudioManager\";\nimport { Float32Buffer } from \"../../logic/Float32Buffer\";\nimport { freqToMidi } from \"../../logic/util/Math\";\nimport { WorkletCallback } from \"../../logic/util/Worklet\";\nimport InactiveDisplay from \"../generic/InactiveDisplay\";\nimport LoadingDisplay from \"../generic/LoadingDisplay\";\nimport { IDashboardComponentProps } from \"../generic/DshbComp\";\nimport TunerDisplay from \"./TunerDisplay\";\n\n\nenum TunerState {\n  INACTIVE,\n  LOADING,\n  ACTIVE,\n\n  OTHER_ERR,\n}\n\nexport type INote = NoteType | NoNote;\nexport type Tuning = INote[];\n\nconst tuning_options: Tuning[] = filterValidTunings([\n  [\"E2\", \"A2\", \"D3\", \"G3\", \"B3\", \"E4\"],\n  [\"E2123\", \"A2\", \"Daa3\", \"Gzyda3\", \"B94%3\", \"E4\"],\n]);\n\n// how often we look for which note they're trying to tune to\nconst target_refresh_interval = 400;\nconst pitch_buffer_len = 10;\n\n// path relative to public directory\nconst worklet_processor_path = \"workers/pitch-worklet-processor.js\";\n// the name for both the worklet and audio node\nconst node_name = 'pitch-processor';\n\n\n// given the users pitch, find the closest note in the tuning\nfunction getClosestTuningNote(inputFreq: number, tuning: Tuning): INote {\n  // the distance between the users pitch and the notes in the tuning\n  // currently, it's using semitones via midi numbers\n  let noteDists = tuning.map(note => {\n    if (note.midi != null) {\n      return Math.abs(note.midi - freqToMidi(inputFreq));\n    }\n    return Number.MAX_SAFE_INTEGER;\n  });\n\n  // return the note in the tuning that is closest to the input\n  let argmin = noteDists.indexOf(Math.min(...noteDists));\n  return Note.get(tuning[argmin]);\n}\n\nfunction filterValidTunings(tunings: NoteLiteral[][]): Tuning[] {\n  let noteTunings: Tuning[] = [];\n\n  for (let i = 0; i < tunings.length; i++) {\n    let notes = tunings[i].map(Note.get);\n    if (notes.every(note => !note.empty)) {\n      noteTunings.push(notes as Tuning);\n    }\n  }\n\n  return noteTunings;\n}\n\n\ninterface ITunerProps extends IDashboardComponentProps {\n  audioManager: AudioManager;\n  audioActive: boolean;\n}\n\nconst Tuner: FunctionComponent<ITunerProps> = (props: ITunerProps) => {\n  const [pitch, setPitch] = useState(NaN);\n  const [pitchBuffer, setPitchBuffer] = useState(new Float32Buffer(pitch_buffer_len));\n\n  const [tuning, setTuning] = useState<Tuning>(tuning_options[0]);\n  const [targetNote, setTargetNote] = useState<INote>(tuning[0]);\n\n  const [targetRefreshFlag, setTargetRefreshFlag] = useState(false);\n  const [compState, setCompState] = useState(TunerState.INACTIVE);\n\n  let { audioManager, audioActive } = props;\n\n  const onWorkletMsg: WorkletCallback = (e: MessageEvent) => {\n    try {\n      // set pitch, could be NaN\n      let newPitch = Number.parseFloat(e.data);\n      setPitch(newPitch);\n\n      // update pitch buffer\n      if (!isNaN(newPitch)) {\n        setPitchBuffer((pitchBuffer) => {\n          pitchBuffer.append([newPitch]);\n          return pitchBuffer;\n        });\n      }\n    } catch (e) {\n      console.log(\"error in onWorkletMsg: \" + e);\n    }\n  }\n\n  // create and attach the essentia node to audio context\n  useEffect(() => {\n    audioManager.addWorklet(node_name, worklet_processor_path, onWorkletMsg);\n  }, [compState == TunerState.LOADING, audioManager]);\n\n\n  // FSM for component visual state\n  let content: JSX.Element;\n  switch (compState) {\n    case TunerState.INACTIVE:\n      content = <InactiveDisplay />;\n\n      if (audioActive) {\n        setCompState(TunerState.LOADING);\n      }\n      break;\n    case TunerState.LOADING:\n      content = <LoadingDisplay />;\n\n      if (!isNaN(pitch)) {\n        setCompState(TunerState.ACTIVE);\n      }\n      break;\n    case TunerState.ACTIVE:\n      content = <TunerDisplay pitch={pitch} targetNote={targetNote} tuning={tuning} />\n\n      if (!audioActive) {\n        setCompState(TunerState.INACTIVE);\n      }\n      break;\n    case TunerState.OTHER_ERR:\n    default:\n      content = <div>error</div>;\n      break;\n  }\n\n  // update target note every target_refresh_interval\n  useEffect(() => {\n    if (!isNaN(pitch)) {\n      const timer = setTimeout(() => {\n        setTargetNote(getClosestTuningNote(pitch, tuning));\n        setTargetRefreshFlag(flag => !flag);\n      }, target_refresh_interval);\n\n      return () => { clearTimeout(timer) }\n    }\n\n  }, [targetRefreshFlag, tuning, isNaN(pitch)]);\n\n\n  return (\n    <div className=\"tuner\">\n      <h4 className=\"\">Tuner</h4>\n      {content}\n    </div>\n  );\n}\n\nexport default Tuner;","\n\nexport class Float32Buffer {\n    private _bufferSize: number;\n    private _buffer: Float32Array;\n\n    constructor(bufferSize: number) {\n      this._bufferSize = bufferSize;\n      this._buffer = new Float32Array(this._bufferSize);\n    }\n  \n    get bufferSize() {\n      return this._bufferSize;\n    }\n  \n    get data() {\n      return this._buffer;\n    }\n\n    get head() {\n        return this._buffer[this._bufferSize-1];\n    }\n  \n    append(data: ArrayLike<number>) {\n      if (data.length > this._bufferSize) {\n        throw new Error(\"data.length > this._bufferSize\");\n      }\n  \n      // this._buffer.set(this._buffer.slice(data.length), 0);\n      // this._buffer.set(data, this._bufferSize - data.length);\n  \n      // shift the data in the buffer to the left to make room\n      for (let i = data.length; i < this._bufferSize; i++) {\n        this._buffer[i - data.length] = this._buffer[i];\n      }\n  \n      // copy the new data to the end of the buffer\n      let startIdx = this._bufferSize - data.length;\n      for (let i = 0; i < data.length; i++) {\n        this._buffer[startIdx + i] = data[i];\n      }\n    }\n  \n    clear() {\n      for (let i = 0; i < this._bufferSize; i++) {\n        this._buffer[i] = 0;\n      }\n    }\n  \n    allZero() {\n      for (let i = 0; i < this._bufferSize; i++) {\n        if (this._buffer[i] != 0) {\n          return false;\n        }\n      }\n      return true;\n    }\n  \n    mean() {\n      let sum = 0;\n      for (let i = 0; i < this._bufferSize; i++) {\n        sum += this._buffer[i];\n      }\n      return sum / this._bufferSize;\n    }\n\n    median() {\n      let sorted = this._buffer.slice();\n      sorted.sort();\n      return sorted[Math.floor(sorted.length / 2)];\n    }\n   \n  }","import { FunctionComponent } from \"react\";\n\ninterface LoadingDisplayProps {\n    text?: string;\n}\n \nconst LoadingDisplay: FunctionComponent<LoadingDisplayProps> = (props: LoadingDisplayProps) => {\n    return ( <div className=\"loading-display\"> Loading :{'>'} </div> );\n}\n \nexport default LoadingDisplay;","import { FunctionComponent } from \"react\";\nimport { roundNum } from \"../../logic/util/Math\";\nimport { INote, Tuning } from \"./Tuner\";\n\n\ninterface ITunerDisplayProps {\n  pitch: number;\n  targetNote: INote;\n  tuning: Tuning;\n}\n\nconst TunerDisplay: FunctionComponent<ITunerDisplayProps> = (props: ITunerDisplayProps) => {\n\n  return (\n    <>\n      <div>\n        {!props.targetNote.empty &&\n          props.tuning.map(note => {\n            let spanClass = \"\";\n            if (note.name === props.targetNote.name && !isNaN(props.pitch)) {\n              spanClass += \" alert-text\"\n            }\n            return <span className={spanClass}>{note.name} </span>;\n          })\n        }\n      </div>\n      <div>\n        Target: {roundNum(props.targetNote.freq!, 1)} Hz\n        <br />\n        You:\n        {isNaN(props.pitch) ?\n          <span> ~~~</span>\n          :\n          <span> {roundNum(props.pitch, 1)} Hz</span>\n        }\n      </div>\n    </>\n  );\n}\n\nexport default TunerDisplay;","import { FunctionComponent, useState } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\nimport AlertDismissable from \"../components/AlertDismissable\";\nimport MidiMouthForm from \"../components/midi-mouth/MidiMouthForm\";\nimport Sidebar from \"../components/Sidebar\";\n\n\ninterface MidiMouthProps {\n\n}\n\nenum RequestStatus {\n    None,\n    Submitted,\n    Success,\n    Error\n}\n\nconst WELCOME_MESSAGE = \"Make a song with your voice! Choose a sound clip, song, and go!\";\nconst API_URL = \"https://bazamjam.uc.r.appspot.com/\";\n\nfunction downloadSong(song: string) {\n    const url = API_URL + \"download_song?song_id=\" + song;\n    fetch(url);\n    // window.open(url);\n}\n\nconst MidiMouth: FunctionComponent<MidiMouthProps> = () => {\n    const [outputSongUrl, setOutputSongUrl] = useState(\"\");\n    const [songCreationStatus, setSongCreationStatus] = useState(RequestStatus.None);\n\n    let songUrl = outputSongUrl;\n    console.log(ReactPlayer.canPlay(songUrl))\n    return (\n        <div className=\"midi-app\">\n            <Sidebar />\n            <div className=\"midi-main\">\n                <h1 className=\"midi-header\">Midi Mouth 🎶👄🎶</h1>\n                <AlertDismissable\n                    header=\"Howdy!\"\n                    message={WELCOME_MESSAGE}\n                />\n                <MidiMouthForm apiRoot={API_URL} setOutputSong={setOutputSongUrl} />\n                <hr />\n                {outputSongUrl.length > 0 && (\n                    <Card>\n                        <Card.Header>\n                            <h3>Your song is ready!</h3>\n                        </Card.Header>\n                        <Card.Body>\n                            <ReactPlayer url={songUrl} config={{ file: { forceAudio: true } }} controls={true}\n                                height={50} width={300} />\n                        </Card.Body>\n                    </Card>\n                )\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default MidiMouth;","import { forwardRef, FunctionComponent, ReactElement } from \"react\";\nimport { Layout } from \"react-grid-layout\";\n\nexport interface IDashboardComponentProps {\n  // logic\n\n  // grid-item requirements\n  className?: string;\n  key?: string;\n  \"data-grid\"?: Layout;\n  style?: { [x: string]: string };\n  children?: any;\n};\n\n\n// TODO: Compostable dashboard component wrapper?\nconst DashboardComponent: FunctionComponent<IDashboardComponentProps> = forwardRef(({ className, style = {}, ...props }, ref) => {\n  return (\n    <div {...props}\n      style={{ ...style }}\n      className={className + \" dashboard-component\"}\n      ref={ref as React.RefObject<HTMLDivElement>}>\n      {props.children}\n    </div>\n  );\n});\n\nexport default DashboardComponent;","import { createElement, FunctionComponent, ReactElement, useMemo, useState } from \"react\";\nimport \"../assets/App.css\";\n\n// grid\nimport RGL, { Layout, ReactGridLayoutProps, WidthProvider } from 'react-grid-layout';\nimport '../assets/grid_styles.css';\nimport '../assets/resizable_styles.css';\nimport AudioManager from \"../logic/AudioManager\";\nimport SampleComponent from \"./SampleComponent\";\nimport RecorderComponent from \"./recorder/Recorder\";\nimport MidiM from \"./midi-mouth/MidiMComp\";\nimport React from \"react\";\nimport AudioSnapshot from \"../logic/AudioSnapshot\";\nimport SoundContext from \"../logic/SoundContext\";\nimport Tuner from \"./tuner/Tuner\";\nimport DashboardComponent from \"./generic/DshbComp\";\n\n\n/*\n =========== types\n*/\nexport interface IGridComponent<T> {\n  element: FunctionComponent<T>;\n  props: T;\n  layout: Layout;\n  children?: React.ReactNode[];\n}\n\n/*\n =========== constants\n*/\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst gridProps: ReactGridLayoutProps = {\n  // layout: defaultLayouts.lg,\n  rowHeight: 200,\n  cols: 3,\n  verticalCompact: true,\n  isBounded: true,\n  onLayoutChange: function () { },\n};\n\nconst recorderLayout = { i: 'recorder', x: 0, y: 0, w: 3, h: 1, static: true };\nconst tunerLayout = { i: 'tuner', x: 0, y: 1, w: 1, h: 1, static: false };\n\nconst components: { [key: string]: IGridComponent<any> } = {\n  sample: {\n    element: SampleComponent,\n    props: {},\n    layout: { i: 'sample', x: 1, y: 2, w: 1, h: 1 }\n  },\n  midiMouth: {\n    element: MidiM,\n    props: {},\n    layout: { i: '1', x: 0, y: 0, w: 1, h: 3 }\n  },\n};\n\n\ninterface IDashboardProps { }\n\nconst Dashboard: FunctionComponent<IDashboardProps> = (props: IDashboardProps) => {\n  const [audioManager, setaudioManager] = useState(new AudioManager());\n  let [audioSnapshot, setAudioSnapshot] = useState(new AudioSnapshot());\n\n  const snapshot = useMemo(() => audioSnapshot, [audioSnapshot]);\n\n  let updateSoundData = (soundData?: Float32Array) => {\n    // TODO: This re renders the whole dashboard, fix\n    // problem: how to update context consumers without updating state?\n\n    setAudioSnapshot(new AudioSnapshot(soundData));\n  }\n\n  // https://github.com/react-grid-layout/react-grid-layout\n  return (\n    <div className=\"dashboard\">\n      <SoundContext.Provider value={snapshot}>\n        <ReactGridLayout className=\"grid\" {...gridProps}>\n\n          <DashboardComponent data-grid={recorderLayout} key={recorderLayout.i}>\n            <RecorderComponent audioManager={audioManager} updateSoundData={updateSoundData} />\n          </DashboardComponent>\n\n          <DashboardComponent data-grid={tunerLayout} key={tunerLayout.i} >\n            <Tuner audioManager={audioManager} audioActive={audioManager.audioActive} />\n          </DashboardComponent>\n\n          <DashboardComponent data-grid={components.sample.layout} key={components.sample.layout.i} >\n            <SampleComponent />\n          </DashboardComponent>\n\n        </ReactGridLayout>\n      </SoundContext.Provider>\n    </div >\n  );\n}\n\nexport default Dashboard;\n","import { FunctionComponent, useState } from \"react\";\nimport { ProSidebar, Menu, MenuItem, SidebarHeader, SidebarContent, SidebarFooter } from 'react-pro-sidebar';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from \"react-router-dom\";\n\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport { TiPencil } from 'react-icons/ti';\nimport { GiAudioCassette } from 'react-icons/gi';\nimport { BiCodeCurly, BiArrowFromRight, BiArrowFromLeft } from 'react-icons/bi';\nimport { BsGear } from 'react-icons/bs';\nimport { MdAccountCircle, } from 'react-icons/md';\nimport { RiDoorClosedLine, RiDoorLockLine, RiDoorOpenLine } from 'react-icons/ri';\nimport { CgSmileMouthOpen } from 'react-icons/cg';\n\n\nconst icons = {\n    menuClosed: <BiArrowFromLeft />,\n    menuOpen: <BiArrowFromRight />,\n    library: <GiAudioCassette />,\n    settings: <BsGear />,\n    sourceCode: <BiCodeCurly />,\n    contact: <TiPencil />,\n    login: <RiDoorClosedLine />,\n    logout: <RiDoorClosedLine />,\n    midimouth: <CgSmileMouthOpen />,\n};\n\ninterface ISidebarProps {\n    isMobile?: boolean;\n}\n\nconst Sidebar: FunctionComponent<ISidebarProps> = (props: ISidebarProps) => {\n    const [isClosed, setIsClosed] = useState(props.isMobile == true);    // if it's mobile, start closed\n    const { loginWithRedirect, logout, isAuthenticated } = useAuth0();\n\n    // display properties\n    let title = isClosed ? \"BzJ\" : \"BazamJam\";\n    let width = props.isMobile ? \"20px\" : \"175px\";\n    let openCloseIcon = isClosed ? icons.menuClosed : icons.menuOpen;\n\n    // functions\n    let handleClose = () => setIsClosed(!isClosed);\n    let onLibaryClick = isAuthenticated ? () => { } : loginWithRedirect;\n    let onSettingsClick = isAuthenticated ? () => { } : loginWithRedirect;\n\n\n    // logic\n    if (props.isMobile && !isClosed) {\n        setIsClosed(true);\n    }\n\n\n    return (\n        <div className=\"sidebar\">\n            <ProSidebar collapsed={isClosed} width={width}>\n\n                <SidebarHeader className=\"title-header\">\n                    <div>{title}</div>\n                </SidebarHeader>\n\n                <SidebarContent>\n                    <Menu iconShape=\"round\">\n\n\n\n                        <MenuItem icon={icons.library} onClick={() => onLibaryClick()}>\n                            {isAuthenticated ? <a href=\"https://omfgdogs.com/\">Library</a> : \"Library\"}\n                        </MenuItem>\n\n\n                        <MenuItem icon={icons.midimouth}>\n                            <Link to=\"/midi-mouth\">MidiMouth</Link>\n                        </MenuItem>\n\n                        {!isAuthenticated &&\n                            <MenuItem icon={icons.login} onClick={() => loginWithRedirect()}>\n                                Sign in\n                            </MenuItem>\n                        }\n\n                        {isAuthenticated &&\n                            <MenuItem icon={icons.settings} onClick={() => onSettingsClick()}>\n                                <a href=\"https://omfgdogs.com/\">Settings</a>\n                            </MenuItem>\n                        }\n\n                        <MenuItem icon={openCloseIcon} onClick={handleClose}>\n                            Minimize\n                        </MenuItem>\n\n                    </Menu>\n                </SidebarContent>\n\n                <SidebarFooter>\n                    <Menu iconShape=\"round\">\n                        {isAuthenticated &&\n                            <MenuItem icon={icons.logout} onClick={() => logout({ returnTo: window.location.origin })}>\n                                Log out\n                            </MenuItem>\n                        }\n                        <MenuItem>\n                            Beta v0.1\n                        </MenuItem>\n                        <MenuItem icon={icons.contact}>\n                            <a href=\"mailto:davidhaas6@gmail.com\">Contact</a>\n                        </MenuItem>\n                        <MenuItem icon={icons.sourceCode}>\n                            <a href=\"https://github.com/davidhaas6/bazamjam\">Source</a>\n                        </MenuItem>\n                        \n\n                    </Menu>\n                </SidebarFooter>\n\n            </ProSidebar>\n        </div>\n    );\n}\n\nexport default Sidebar;","import  { FunctionComponent } from 'react';\nimport \"../assets/App.css\";\n\nimport Dashboard from '../components/Dashboard';\nimport Sidebar from '../components/Sidebar';\n\nimport 'react-bootstrap'\n\ninterface IAppProps {\n  \n}\n \nconst App: FunctionComponent<IAppProps> = (props: IAppProps) => {\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Dashboard />\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routes/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport {\n    BrowserRouter,\n    Routes,\n    Route\n} from \"react-router-dom\";\nimport MidiMouth from './routes/MidiMouth';\n\nReactDOM.render(\n    <Auth0Provider\n        // If you are using a custom domain with Auth0, the value of the domain property is \n        //the value of your custom domain instead of the value reflected in the \"Settings\" tab.\n        domain=\"dev-9c8pon97.us.auth0.com\"\n        clientId=\"cofJDIegnz1wWXwQiDA2Qda0lCQ4uKDL\"\n        redirectUri={window.location.origin}\n        audience=\"https://YOUR_DOMAIN/api/v2/\"\n        scope=\"read:current_user update:current_user_metadata\"\n    >\n        <BrowserRouter>\n            <Routes>\n                <Route path=\"/\" element={<App />} />\n                <Route path=\"/midi-mouth\" element={<MidiMouth />} />\n            </Routes>\n        </BrowserRouter>\n\n    </Auth0Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}