{"version":3,"sources":["components/Dashboard.tsx","components/control-section/ControlButton.tsx","logic/hooks.ts","components/control-section/ButtonPanel.tsx","components/generic/InactiveDisplay.tsx","components/generic/LoadingDisplay.tsx","components/tuner/TonalDisplay.tsx","components/Settings.tsx","components/Visuals.tsx","components/Widgets.tsx","logic/util/Worklet.ts","logic/AudioManager.ts","logic/PubSub.ts","routes/App.tsx","reportWebVitals.ts","index.tsx"],"names":["DashState","ControlButton","props","useState","isPressed","setIsPressed","didMount","setDidMount","useEffect","useDidMount","snd_on","useMemo","Audio","snd_off","play","releaseCondition","console","log","onPress","onRelease","buttonClass","baseStyles","pressedStyles","className","onClick","press","pressedChild","notPressedChild","ButtonPanel","audioManager","useContext","AudioManagerContext","iconSize","icons","size","pause","settings","close","widgets","recorderPressed","recorderUnpressed","startRecording","setPanel","stopRecording","curPanel","InactiveDisplay","LoadingDisplay","TonalDisplay","data","chord","setChord","has_chord","chords_key","headerText","NODE_NAME","Dashboard","pubSub","PubSubContext","audioActive","setAudioActive","hasData","setHasData","INACTIVE","dashState","setDashState","features","setFeatures","subscribe","active","content","isLoading","LOADING","nodeExists","addWorklet","e","publish","ACTIVE","OTHER_ERR","Settings","Visuals","isHidden","canvasRef","draw","maxRate","useRef","frameId","lastFrameTime","startTime","ctx","current","getContext","window","requestAnimationFrame","render","curTime","cancelAnimationFrame","useCanvas","getData","reverse","width","canvas","height","sample_scale","sampleWidthPx","length","clearRect","fillStyle","lineWidth","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","i","next_x","next_y","lineTo","stroke","getTimeData","cssStyle","ref","Widgets","createEssentiaNode","audioCtx","workletJsPath","nodeName","a","audioWorklet","addModule","credentials","AudioWorkletNode","emptyBuffer","Float32Array","AudioManager","pubsub","audioContext","_nodes","nodeGraph","audioStream","_timeBuffer","_freqBuffer","FFT_SIZE","SAMPLE_RATE","BUFFER_SIZE","this","newSourceNode","stream","createMediaStreamSource","Map","AudioContext","sampleRate","analyzer","AnalyserNode","fftSize","addNode","navigator","mediaDevices","getUserMedia","audio","video","srcNode","replaceNode","outputs","setTracksEnabled","bind","getFreqData","initAudio","enabled","getAudioTracks","forEach","element","getFloatTimeDomainData","getFloatFrequencyData","node","key","conn","Error","inputs","inputKey","connectNodes","outputKey","srcNodeKey","dstNodeKey","connect","has","set","get","includes","push","nodeKey","newNode","disconnect","inputNodes","getInputNodesFor","outputNodes","srcNodes","value","validNodes","filter","name","js_path","onMessage","port","onmessage","PubSub","subscribers","event","callback","args","React","createContext","App","_","setCurPanel","Provider","newPanel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","domain","clientId","redirectUri","location","origin","audience","scope","path","document","getElementById"],"mappings":"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","file":"static/js/main.c03c8756.chunk.js","sourcesContent":["// dashboard that displays the contents of the functions\r\n// functions display information to the user. for example,\r\n// the results of an audio processing algorithm.\r\n\r\nimport { FunctionComponent, useContext, useEffect, useState } from \"react\";\r\nimport { WorkletCallback } from \"../logic/util/Worklet\";\r\nimport { AudioManagerContext, PubSubContext } from \"../routes/App\";\r\nimport InactiveDisplay from \"./generic/InactiveDisplay\";\r\nimport LoadingDisplay from \"./generic/LoadingDisplay\";\r\nimport TonalDisplay, { ITonalData } from \"./tuner/TonalDisplay\";\r\n\r\n// path relative to public directory\r\nconst WORKLET_PATH = \"workers/main-algo-worklet.js\";\r\n// the name for both the worklet and audio node\r\nconst NODE_NAME = 'algo-processor';\r\n\r\nenum DashState {\r\n  INACTIVE,\r\n  LOADING,\r\n  ACTIVE,\r\n\r\n  OTHER_ERR,\r\n}\r\n\r\ninterface IDashboardProps {\r\n  className?: string;\r\n}\r\n\r\nconst Dashboard: FunctionComponent<IDashboardProps> = (props: IDashboardProps) => {\r\n  let pubSub = useContext(PubSubContext);\r\n  const audioManager = useContext(AudioManagerContext);\r\n\r\n  const [audioActive, setAudioActive] = useState(false);\r\n  const [hasData, setHasData] = useState(false);\r\n  const [dashState, setDashState] = useState(DashState.INACTIVE)\r\n  const [features, setFeatures] = useState<ITonalData>();\r\n\r\n  useEffect(() => {\r\n    console.log(\"tuner subscripting to audio-active\");\r\n    pubSub.subscribe(\"audio-active\", (active: boolean) => setAudioActive(active));\r\n  }, [pubSub]);\r\n\r\n\r\n\r\n  // create and attach the essentia node to audio context\r\n  let isLoading = dashState === DashState.LOADING;\r\n  useEffect(() => {\r\n    if (audioActive && !audioManager.nodeExists(NODE_NAME)) {\r\n\r\n      const onWorkletMsg: WorkletCallback = (e: MessageEvent) => {\r\n        try {\r\n          pubSub.publish('tuner-message', e);\r\n          setFeatures(() => e.data as ITonalData);\r\n          setHasData(e.data != null);\r\n        } catch (e) {\r\n          console.log(\"error in onWorkletMsg: \" + e);\r\n        }\r\n      }\r\n\r\n      audioManager.addWorklet(NODE_NAME, WORKLET_PATH, onWorkletMsg);\r\n    }\r\n  }, [isLoading, audioActive, audioManager, pubSub]);\r\n\r\n  let content: JSX.Element;\r\n  switch (dashState) {\r\n    case DashState.INACTIVE:\r\n      content = <InactiveDisplay />;\r\n\r\n      if (audioActive) {\r\n        setDashState(DashState.LOADING);\r\n        console.log(\"setting state to loading\");\r\n\r\n      }\r\n      break;\r\n    case DashState.LOADING:\r\n      content = <LoadingDisplay />;\r\n\r\n      if (hasData) {\r\n        setDashState(DashState.ACTIVE);\r\n      }\r\n      if (!audioActive) {\r\n        setDashState(DashState.INACTIVE);\r\n      }\r\n      break;\r\n    case DashState.ACTIVE:\r\n      \r\n        content = <TonalDisplay data={features} />;\r\n      \r\n\r\n      if (!audioActive) {\r\n        setDashState(DashState.INACTIVE);\r\n      }\r\n      break;\r\n    case DashState.OTHER_ERR:\r\n    default:\r\n      content = <div>error</div>;\r\n      break;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={\"dashboard \" + props.className ?? \"\"}>\r\n      <div className=\"tuner\">\r\n        <div className=\"dash-header tuner-header\">BazamJam</div>\r\n        {content}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import { FunctionComponent, ReactChild, useEffect, useMemo, useState } from \"react\";\r\nimport { useDidMount } from \"../../logic/hooks\";\r\n\r\ninterface ControlButtonProps {\r\n  pressedChild?: ReactChild;\r\n  notPressedChild?: ReactChild;\r\n\r\n  baseStyles?: string;\r\n  pressedStyles?: string;\r\n\r\n  onPress?: () => void;\r\n  onRelease?: () => void;\r\n\r\n  releaseCondition?: boolean; // release button when this is true\r\n}\r\n\r\nconst ControlButton: FunctionComponent<ControlButtonProps> = (props: ControlButtonProps) => {\r\n  const [isPressed, setIsPressed] = useState(false);\r\n  const didMount = useDidMount();\r\n\r\n  const snd_on = useMemo(() => {\r\n    return new Audio(\"assets/sound/switch-on-2.wav\");\r\n  }, []);\r\n\r\n  const snd_off = useMemo(() => {\r\n    return new Audio(\"assets/sound/switch-off-2.wav\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (didMount) {\r\n      if (isPressed) {\r\n        snd_on.play();\r\n      } else {\r\n        snd_off.play();\r\n      }\r\n    }\r\n  }, [isPressed, snd_on, snd_off]);\r\n\r\n  useEffect(() => {\r\n    if (props.releaseCondition) {\r\n      setIsPressed(false);\r\n      console.log(\"release condition executred\");\r\n    }\r\n  }, [props.releaseCondition]);\r\n\r\n  // execute press/release functions\r\n  useEffect(() => {\r\n    if (isPressed) {\r\n      props?.onPress?.();\r\n    } else {\r\n      props?.onRelease?.();\r\n      console.log(\"release called\")\r\n    }\r\n    //console.log(\"effect called:\",isPressed);\r\n  }, [isPressed] );\r\n\r\n\r\n  // add css classes based on button state\r\n  let buttonClass = props.baseStyles ?? \"control-button\";\r\n  buttonClass += \" \" + (isPressed ? (props.pressedStyles ?? \"cb-pressed\") : \"\");\r\n\r\n  return (\r\n    <button className={buttonClass} onClick={() => {setIsPressed((press:boolean) => !press)}}>\r\n      <span>\r\n        {isPressed ? props.pressedChild : props.notPressedChild}\r\n      </span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ControlButton;","import { RefObject, useEffect, useRef, useState } from \"react\";\r\n\r\nexport function useDidMount() {\r\n  const [didMount, setDidMount] = useState(false);\r\n  useEffect(() => {\r\n    setDidMount(true);\r\n  }, []);\r\n  return didMount;\r\n}\r\n\r\nexport function useFreqLog(id: string) {\r\n  useEffect(() => {\r\n    console.time(id);\r\n  }, [id]);\r\n  console.timeLog(id);\r\n}\r\n\r\n\r\n\r\n// partially from here: https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\r\nexport interface DrawProps {\r\n  getData?: () => Float32Array;\r\n}\r\nexport type DrawFunc = (ctx: CanvasRenderingContext2D, drawProps?: DrawProps) => void;\r\n\r\n\r\n// Effect that returns a canvas ref animated by draw(), with optional rate limiting \r\n// specify maxRate in hz\r\nexport function useCanvas(draw: DrawFunc, props?: DrawProps, maxRate?: number): RefObject<HTMLCanvasElement> {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const SEC_TO_NANO = 1000000000;\r\n  // TODO: add rate limiting\r\n\r\n  useEffect(() => {\r\n    const ctx = canvasRef.current?.getContext('2d');\r\n\r\n    let frameId: number;\r\n    let lastFrameTime: DOMHighResTimeStamp;\r\n    let startTime: DOMHighResTimeStamp;\r\n\r\n    // render() is the animation loop\r\n    const render = (curTime: DOMHighResTimeStamp) => {\r\n      if (ctx) {\r\n        if (startTime == null) {\r\n          startTime = curTime;\r\n        }\r\n\r\n        // rate limit if specififed\r\n        if (maxRate && lastFrameTime) {\r\n          const periodNano = 1 / maxRate * SEC_TO_NANO;\r\n          if ((curTime - lastFrameTime) < periodNano) return;\r\n        }\r\n\r\n        draw(ctx, props);\r\n\r\n        lastFrameTime = curTime;\r\n        frameId = window.requestAnimationFrame(render); // usually already rate limits to screen refresh rate\r\n      }\r\n\r\n    };\r\n    window.requestAnimationFrame(render);\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(frameId);\r\n    };\r\n  }, [draw, props, maxRate]);\r\n\r\n  return canvasRef;\r\n}\r\n","import { FunctionComponent, useContext, useMemo } from \"react\";\r\nimport { AudioManagerContext } from \"../../routes/App\";\r\nimport ControlButton from \"./ControlButton\";\r\n\r\nimport { TiMediaStopOutline, TiNotesOutline } from \"react-icons/ti\";\r\nimport { RiCloseLine } from \"react-icons/ri\";\r\nimport {\r\n  BsFillPauseFill, BsGearFill,\r\n  BsFillGridFill, BsFillPlayFill\r\n} from \"react-icons/bs\";\r\n\r\n\r\ninterface ButtonPanelProps {\r\n  curPanel: string;  // the current display in the 'dashboard'\r\n  setPanel: (panel: string) => void;\r\n}\r\n\r\nconst ButtonPanel: FunctionComponent<ButtonPanelProps> = (props: ButtonPanelProps) => {\r\n  const audioManager = useContext(AudioManagerContext);\r\n\r\n  let iconSize = 40;\r\n  const icons = useMemo(() => {\r\n    return {\r\n      play: <BsFillPlayFill className=\"cb-icon\" size={iconSize + 2} />,\r\n      pause: <BsFillPauseFill className=\"cb-icon\" size={iconSize + 0} />,\r\n      settings: <BsGearFill className=\"cb-icon\" size={iconSize - 2} />,\r\n      close: <RiCloseLine className=\"cb-icon\" size={iconSize + 2} />,\r\n      widgets: <BsFillGridFill className=\"cb-icon\" size={iconSize - 2} />,\r\n      recorderPressed: <TiMediaStopOutline size={50} />,\r\n      recorderUnpressed: <TiNotesOutline size={50} />\r\n    }\r\n  }, [iconSize]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"layout-section button-box\">\r\n\r\n      {/* recording button */}\r\n      <ControlButton\r\n        onPress={() => {\r\n          audioManager.startRecording();\r\n          props.setPanel(\"dashboard\")\r\n        }}\r\n        onRelease={() => audioManager.stopRecording()}\r\n        // baseStyles=\"recording-button\"\r\n        // pressedStyles=\"rb-pressed\"\r\n        pressedChild={icons.recorderPressed}\r\n        notPressedChild={icons.recorderUnpressed}\r\n        releaseCondition={props.curPanel !== \"dashboard\"}\r\n      />\r\n\r\n\r\n      {/* widget button */}\r\n      <ControlButton\r\n        notPressedChild={icons.widgets}\r\n        pressedChild={icons.close}\r\n        onPress={() => { props.setPanel(\"widgets\") }}\r\n        onRelease={() => { if (props.curPanel === \"widgets\") props.setPanel(\"dashboard\") }}\r\n        releaseCondition={props.curPanel !== \"widgets\"}\r\n      />\r\n\r\n      {/* settings button */}\r\n      <ControlButton\r\n        notPressedChild={icons.settings}\r\n        pressedChild={icons.close}\r\n        onPress={() => { props.setPanel(\"settings\") }}\r\n        onRelease={() => { if (props.curPanel === \"settings\") props.setPanel(\"dashboard\") }}\r\n        releaseCondition={props.curPanel !== \"settings\"}\r\n      />\r\n\r\n      {/* play button */}\r\n      <ControlButton\r\n        notPressedChild={icons.play}\r\n        pressedChild={icons.pause}\r\n      />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonPanel;","import { FunctionComponent } from \"react\";\r\n\r\ninterface InactiveDisplayProps {\r\n  onClick?: () => void;\r\n}\r\n\r\nconst InactiveDisplay: FunctionComponent<InactiveDisplayProps> = (props: InactiveDisplayProps) => {\r\n  return (<div className=\"inactive-display\"> Press Play! </div>);\r\n}\r\n\r\nexport default InactiveDisplay;","import { FunctionComponent } from \"react\";\r\n\r\ninterface LoadingDisplayProps {\r\n    text?: string;\r\n}\r\n \r\nconst LoadingDisplay: FunctionComponent<LoadingDisplayProps> = (props: LoadingDisplayProps) => {\r\n    return ( <div className=\"loading-display\"> Loading :{'>'} </div> );\r\n}\r\n \r\nexport default LoadingDisplay;","import { FunctionComponent, useEffect, useState } from \"react\";\r\n\r\ninterface TonalDisplayProps {\r\n  data?: ITonalData;\r\n}\r\n\r\nexport interface ITonalData {\r\n  chords_changes_rate: any,\r\n  chords_histogram: any,\r\n  chords_key: any,\r\n  chords_number_rate: any,\r\n  chords_progression: any,\r\n  chords_scale: any,\r\n  chords_strength: any,\r\n  hpcp: any,\r\n  hpcp_highres: any,\r\n  key_key: any,\r\n  key_scale: any,\r\n  key_strength: any\r\n}\r\n\r\nconst TonalDisplay: FunctionComponent<TonalDisplayProps> = (props: TonalDisplayProps) => {\r\n  const { data } = props;\r\n  const [chord, setChord] = useState();\r\n\r\n  const has_chord = data?.chords_key != null;\r\n\r\n  useEffect(() => {\r\n    if (has_chord)\r\n      setChord(() => data.chords_key);\r\n  }, [data?.chords_key])\r\n\r\n  const headerText = (has_chord ? \"Current\" : \"Past\") + \" Chord:\"; \r\n\r\n\r\n  return (\r\n    <div className=\"tonal-display\" >\r\n      {/* <ul>\r\n        {Object.entries(data).map((entry) => <li>{entry[0] + \": \" + entry[1]}</li>)}\r\n      </ul> */}\r\n      <br/>\r\n      {headerText}\r\n      <div className=\"current-chord\">{chord}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TonalDisplay;","import { FunctionComponent } from \"react\";\r\n\r\ninterface SettingsProps {\r\n  \r\n}\r\n \r\nconst Settings: FunctionComponent<SettingsProps> = () => {\r\n  return ( \r\n    <div className=\"settings-box\" >\r\n      Settings!!\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Settings;","import { FunctionComponent, useContext } from \"react\";\r\nimport { DrawProps, useCanvas } from \"../logic/hooks\";\r\nimport { AudioManagerContext } from \"../routes/App\";\r\n\r\n\r\n// https://medium.com/fender-engineering/near-realtime-animations-with-synchronized-audio-in-javascript-6d845afcf1c5\r\n\r\n\r\ninterface VisualsProps {\r\n  isHidden?: boolean;\r\n}\r\n\r\n// https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\r\nconst Visuals: FunctionComponent<VisualsProps> = (props: VisualsProps) => {\r\n  const audioManager = useContext(AudioManagerContext);\r\n  const { isHidden = false } = props;\r\n\r\n  const draw = (ctx: CanvasRenderingContext2D, props?: DrawProps) => {\r\n    if (props?.getData == null) return;\r\n    const data = props.getData().reverse();\r\n    const width = ctx.canvas.width;\r\n    const height = ctx.canvas.height;\r\n\r\n    const sample_scale = height / 2 + 50;\r\n    const waveWidth = width - 8;\r\n\r\n    const sampleWidthPx = waveWidth / data.length;\r\n\r\n    ctx.clearRect(0, 0, width, height);\r\n\r\n    ctx.fillStyle = 'black';\r\n    ctx.lineWidth = 1;\r\n\r\n    ctx.shadowOffsetX = 8;\r\n    ctx.shadowOffsetY = 16;\r\n    ctx.shadowBlur = 1;\r\n    ctx.shadowColor = '#00000022';\r\n\r\n    const getSampleY = (sample: number) => sample * sample_scale + height / 2;\r\n\r\n    ctx.beginPath();\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      const next_x = (i + 1) * sampleWidthPx;\r\n      const next_y = getSampleY(data[i + 1]);\r\n\r\n      // ctx.moveTo(i * sampleWidthPx, getSampleY(data[i]));\r\n      ctx.lineTo(next_x, next_y);\r\n    }\r\n    ctx.stroke();\r\n\r\n  };\r\n\r\n  let canvasRef = useCanvas(draw, { getData: () => audioManager.getTimeData() });\r\n\r\n  const cssStyle = \"waveform\" + (isHidden ? \" hidden\" : \"\");\r\n  return (\r\n    <>\r\n\r\n      <canvas ref={canvasRef} className={cssStyle}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Visuals;","import { FunctionComponent } from \"react\";\r\n\r\ninterface WidgetsProps {\r\n\r\n}\r\n\r\nconst Widgets: FunctionComponent<WidgetsProps> = () => {\r\n  return (\r\n    <div className=\"widget-box\">\r\n      Widgets\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;","// a set of business logic functions pertaining to worklets and multithreading\r\n\r\nexport type WorkletCallback = ((this: MessagePort, ev: MessageEvent<any>) => any);\r\n\r\n\r\n// returns an AudioNode linked to an worklet processing function\r\n// the function path is relative to the public directory and is \r\n// specified in the workletProcessorPath variable\r\nexport async function createEssentiaNode(\r\n  audioCtx: AudioContext,\r\n  workletJsPath: string,\r\n  nodeName: string\r\n): Promise<AudioWorkletNode> {\r\n  try {\r\n    // register the audio worker\r\n    console.log(\"registering worker\");\r\n    await audioCtx.audioWorklet.addModule(workletJsPath, { credentials: 'omit' });\r\n  } catch (e) {\r\n    console.log(\"error adding worklet module:\" + e);\r\n  }\r\n\r\n  // instantiate our custom processor as an AudioWorkletNode\r\n  return new AudioWorkletNode(audioCtx, nodeName);\r\n}\r\n","import PubSub from \"./PubSub\";\r\nimport { createEssentiaNode, WorkletCallback } from \"./util/Worklet\";\r\n\r\n\r\n// A string-indexed list of nodes. Essentially a dict\r\ninterface INodes {\r\n  [key: string]: AudioNode;\r\n}\r\n\r\n// \r\ntype NodeKey = keyof INodes;\r\n\r\n// A string-indexed list of nodes. Essentially a dict\r\ninterface INodeConnections {\r\n  [src: NodeKey]: NodeKey;\r\n}\r\n\r\nconst emptyBuffer = new Float32Array(0);\r\n\r\n\r\n// TODO: Add recording loop in here instead of react components\r\n\r\nclass AudioManager {\r\n  // audio state and analysis\r\n  audioContext?: AudioContext;\r\n\r\n  _nodes: INodes; // essentially a dictionary of nodes\r\n  nodeGraph: Map<NodeKey, NodeKey[]>;\r\n\r\n  audioStream?: MediaStream | null;\r\n\r\n  _timeBuffer: Float32Array;\r\n  _freqBuffer: Float32Array;\r\n\r\n  pubsub: PubSub;\r\n\r\n  audioActive: boolean = false; // if we're actively processing audio\r\n\r\n  readonly FFT_SIZE = 2* 8192; // num bins in fft -- real + image\r\n  readonly SAMPLE_RATE = 44100;\r\n  readonly BUFFER_SIZE = this.FFT_SIZE;\r\n\r\n  public get nodes() {\r\n    return this._nodes;\r\n  }\r\n\r\n\r\n  constructor(pubsub: PubSub) {\r\n    this._nodes = {};\r\n    this.nodeGraph = new Map<NodeKey, NodeKey[]>();\r\n\r\n    this._timeBuffer = new Float32Array(this.FFT_SIZE);\r\n    this._freqBuffer = new Float32Array(this.FFT_SIZE / 2);\r\n\r\n    this.pubsub = pubsub;\r\n  }\r\n\r\n  // Initializes the audio context and nodes. Must be called from a user gesture\r\n  //TODO: How to avoid re-doing this w/ every click?\r\n  private async initAudio(): Promise<boolean> {\r\n    // audio context must be created in a user gesture\r\n    if (this.audioContext == null) {\r\n      this.audioContext = new window.AudioContext({ sampleRate: this.SAMPLE_RATE });\r\n    }\r\n\r\n    // Initialize analyzer node\r\n    if (!this.nodeExists('analyzer')) {\r\n      let analyzer = new AnalyserNode(this.audioContext, { fftSize: this.FFT_SIZE });\r\n      this.addNode(analyzer, \"analyzer\");\r\n    }\r\n\r\n    // grab user audio stream\r\n    if (this.audioStream == null) {\r\n      this.audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\r\n\r\n      let srcNode = this.newSourceNode(this.audioContext, this.audioStream);\r\n      if (!this.nodeExists('source')) {\r\n        this.addNode(srcNode, \"source\", { outputs: ['analyzer'] });\r\n      }\r\n      else { // Replace node\r\n        this.replaceNode(\"source\", srcNode);\r\n      }\r\n    } else {\r\n      this.setTracksEnabled(true);\r\n    }\r\n\r\n    // Lets them be used in callbacks\r\n    this.getTimeData.bind(this);\r\n    this.getFreqData.bind(this);\r\n\r\n    return true;\r\n  }\r\n\r\n  /*\r\n  ==== Audio input ===== \r\n  */\r\n\r\n  async startRecording(): Promise<boolean> {\r\n    this.audioActive = await this.initAudio();\r\n    this.pubsub.publish('audio-active', this.audioActive);\r\n\r\n    return this.audioActive;\r\n  }\r\n\r\n  stopRecording(): void {\r\n    this.audioActive = false;\r\n    this.setTracksEnabled(false);\r\n    this.pubsub.publish('audio-active', this.audioActive);\r\n  }\r\n\r\n  private setTracksEnabled(enabled: boolean) {\r\n    this.audioStream?.getAudioTracks().forEach(element => element.enabled = enabled);\r\n  }\r\n\r\n\r\n  public getTimeData(): Float32Array {\r\n    let analyzer = this._nodes['analyzer'] as AnalyserNode;\r\n    if (analyzer) {\r\n      // TODO: this has weird behavior... doesn't always output right thing\r\n      analyzer.getFloatTimeDomainData(this._timeBuffer);\r\n      return this._timeBuffer;\r\n    }\r\n    return emptyBuffer;\r\n  }\r\n\r\n  public getFreqData(): Float32Array {\r\n    let analyzer = this._nodes['analyzer'];\r\n    if (analyzer instanceof AnalyserNode) {\r\n      analyzer.getFloatFrequencyData(this._freqBuffer);\r\n      return this._freqBuffer;\r\n    }\r\n    return emptyBuffer;\r\n  }\r\n\r\n\r\n  /*\r\n  ==== Audio graph structure ===== \r\n  */\r\n\r\n  public addNode(node: AudioNode, key: string, conn?: { inputs?: NodeKey[], outputs?: NodeKey[] }) {\r\n    if (this.nodeExists(key)) {\r\n      throw new Error(\"Key already exists in audio graph\");\r\n    }\r\n    this._nodes[key] = node;\r\n\r\n    // connect the inputs for this node to it\r\n    if (conn?.inputs) {\r\n      conn.inputs.forEach((inputKey) => this.connectNodes(inputKey, key));\r\n    }\r\n\r\n    // connect this node to the ones it outputs to\r\n    if (conn?.outputs) {\r\n      conn.outputs.forEach((outputKey) => this.connectNodes(key, outputKey));\r\n    }\r\n  }\r\n\r\n  public nodeExists(key: any) {\r\n    return key in this._nodes;\r\n  }\r\n\r\n  // conencts two audio nodes -- true on success\r\n  private connectNodes(srcNodeKey: NodeKey, dstNodeKey: NodeKey) {\r\n    if (!this.nodeExists(srcNodeKey) || !this.nodeExists(dstNodeKey)) {\r\n      throw new Error(\"At least one provided key is invalid\");\r\n    }\r\n\r\n    // connect in webaudio graph\r\n    this._nodes[srcNodeKey].connect(this._nodes[dstNodeKey]);\r\n\r\n    // connect in persistent graph\r\n    if (!this.nodeGraph.has(srcNodeKey)) {\r\n      this.nodeGraph.set(srcNodeKey, []);\r\n    }\r\n\r\n    // add if not already in graph\r\n    if (!this.nodeGraph.get(srcNodeKey)?.includes(dstNodeKey)) {\r\n      this.nodeGraph.get(srcNodeKey)?.push(dstNodeKey);\r\n    }\r\n\r\n    console.log(`added  ${srcNodeKey} --> ${dstNodeKey}`);\r\n  }\r\n\r\n  // replaces an audionode in the graph\r\n  private replaceNode(nodeKey: NodeKey, newNode: AudioNode) {\r\n    if (!this.nodeExists(nodeKey as string)) {\r\n      throw new Error(\"Node key does not exist in audio graph\");\r\n    }\r\n\r\n    // disconnect old node from WebAudio graph\r\n    this._nodes[nodeKey].disconnect();\r\n\r\n    let inputNodes = this.getInputNodesFor(nodeKey);\r\n    let outputNodes = this.nodeGraph.get(nodeKey);\r\n\r\n    delete this._nodes[nodeKey];\r\n\r\n    this.addNode(newNode, nodeKey as string, {\r\n      outputs: outputNodes,\r\n      inputs: inputNodes\r\n    });\r\n\r\n    this._nodes[nodeKey] = newNode;\r\n  }\r\n\r\n\r\n  // finds the nodes nodeKey is a destination to\r\n  private getInputNodesFor(nodeKey: NodeKey): NodeKey[] {\r\n    let srcNodes: NodeKey[] = [];\r\n    this.nodeGraph.forEach((value, key) => {\r\n      let validNodes = value.filter((dstNodeKey) => dstNodeKey === nodeKey) as NodeKey[];\r\n      if (validNodes !== null)\r\n        srcNodes.push(...validNodes);\r\n    });\r\n\r\n    return srcNodes;\r\n  }\r\n\r\n  private newSourceNode = (ctx: AudioContext, stream: MediaStream) => {\r\n    return ctx.createMediaStreamSource(stream);\r\n  }\r\n\r\n\r\n  // Create a worklet node from a AudioWorkletProcessor specified by js_path and connect the \r\n  // source node to it so it reads from the microphone.\r\n  // can attach additional event listeners to the AudioWorkletNode\r\n  public async addWorklet(name: string, js_path: string, onMessage: WorkletCallback) {\r\n    // don't add the same node twice, nor to a null context\r\n    if (!this.audioContext || this.nodeExists(name)) {\r\n      console.log(\"Can't add worklet - \" +\r\n        (this.audioContext ? \"Node exists\" : \"Audio context null\")\r\n      );\r\n      return;\r\n    }\r\n\r\n    // create the node and add it to the graph\r\n    try {\r\n      const node = await createEssentiaNode(this.audioContext!, js_path, name);\r\n      node.port.onmessage = onMessage;\r\n\r\n      this.addNode(node, name, { inputs: [\"source\"] });\r\n    } catch (e) {\r\n      // TODO: delete node connections for worker if it exists\r\n      console.log(\"Error adding worklet node:\" + e);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default AudioManager;","// a typescript implementation of pubsub\r\n\r\nclass PubSub {\r\n    private subscribers: { [key: string]: Function[] } = {};\r\n\r\n    public subscribe(event: string, callback: Function) {\r\n        if (!this.subscribers[event]) {\r\n            this.subscribers[event] = [];\r\n        }\r\n\r\n        this.subscribers[event].push(callback);\r\n        this.publish('subscriber-added', [event, callback]);\r\n    }\r\n\r\n    public publish(event: string, ...args: any[]) {\r\n        if (!this.subscribers[event]) {\r\n            return;\r\n        }\r\n\r\n        this.subscribers[event].forEach(callback => callback(...args));\r\n    }\r\n}\r\n\r\nexport default PubSub;","import React, { FunctionComponent, useMemo, useState } from 'react';\r\nimport 'react-bootstrap';\r\nimport \"../assets/App.css\";\r\nimport ButtonPanel from '../components/control-section/ButtonPanel';\r\nimport Dashboard from '../components/Dashboard';\r\nimport Settings from '../components/Settings';\r\nimport Visuals from '../components/Visuals';\r\nimport Widgets from '../components/Widgets';\r\nimport AudioManager from '../logic/AudioManager';\r\nimport PubSub from '../logic/PubSub';\r\n\r\n\r\n// Provider contexts\r\nexport const AudioManagerContext = React.createContext(new AudioManager(new PubSub()));\r\nexport const PubSubContext = React.createContext(new PubSub());\r\n\r\n\r\ninterface IAppProps {}\r\nconst App: FunctionComponent<IAppProps> = (_: IAppProps) => {\r\n  const pubSub = useMemo(() => new PubSub(), []);\r\n  const audioManager = useMemo(() => new AudioManager(pubSub), [pubSub]);\r\n\r\n  const [curPanel, setCurPanel] = useState(\"dashboard\");\r\n\r\n  console.log(\"panel: \" + curPanel);\r\n\r\n  return (\r\n    <PubSubContext.Provider value={pubSub}>\r\n      <AudioManagerContext.Provider value={audioManager}>\r\n\r\n        <div className=\"App\">\r\n          <div className=\"box-body\">\r\n            <div className=\"layout-section info-box\">\r\n              {curPanel === \"widgets\" ? <Widgets /> : null}\r\n              {curPanel === \"settings\" ? <Settings /> : null}\r\n              <Dashboard className={curPanel !== \"dashboard\" ? \"hidden\" : \"\"} /> {/* only hide the dashboard so it doesn't dismount */}\r\n            </div>\r\n\r\n            <div className=\"layout-section display-box\">\r\n              <Visuals isHidden={curPanel !== \"dashboard\"}  />\r\n            </div>\r\n\r\n            <ButtonPanel curPanel={curPanel} setPanel={(newPanel) => setCurPanel(newPanel)} />\r\n          </div>\r\n        </div>\r\n\r\n      </AudioManagerContext.Provider>\r\n    </PubSubContext.Provider >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './routes/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\nimport {\r\n    BrowserRouter,\r\n    Routes,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <Auth0Provider\r\n        // If you are using a custom domain with Auth0, the value of the domain property is \r\n        //the value of your custom domain instead of the value reflected in the \"Settings\" tab.\r\n        domain=\"dev-9c8pon97.us.auth0.com\"\r\n        clientId=\"cofJDIegnz1wWXwQiDA2Qda0lCQ4uKDL\"\r\n        redirectUri={window.location.origin}\r\n        audience=\"https://YOUR_DOMAIN/api/v2/\"\r\n        scope=\"read:current_user update:current_user_metadata\"\r\n    >\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<App />} />\r\n                {/* <Route path=\"/midi-mouth\" element={<MidiMouth />} /> */}\r\n            </Routes>\r\n        </BrowserRouter>\r\n\r\n    </Auth0Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}