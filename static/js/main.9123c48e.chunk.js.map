{"version":3,"sources":["components/RecordingButton.tsx","components/graphs/ChordVisualizer.tsx","components/graphs/FreqVisualizer.tsx","components/graphs/TimeVisualizer.tsx","components/AudioManager.tsx","components/TopBar.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["RecordingButton","props","message","isRecording","btnVariant","ToggleButton","className","type","value","variant","checked","onClick","ChordAnalyzer","this","fs","binCount","update","render","sourceArr","numMax","fillVal","Infinity","maxVals","Array","fill","maxValIdxs","curValIdx","length","curVal","j","k","num","rollingMax","freqData","maxBins","binFreqs","map","bin","binWidth","topFreqs","getLargestNotes","reverse","Row","Col","note","toFixed","f","Note","fromFreq","React","Component","IFreqVisualizer","canvas","discount","createRef","draw","width","height","canvasCtx","current","getContext","clearRect","lineWidth","strokeStyle","barHeight","barWidth","x","minFreq","reduce","prev","cur","i","fillStyle","fillRect","ref","TimeVisualizer","audioData","context","sliceWidth","idx","beginPath","moveTo","y","lineTo","stroke","AudioManager","audioContext","analyser","source","audioActive","FFT_SIZE","SAMPLE_RATE","timeDomainBuffer","freqDomainBuffer","framReqID","Uint8Array","Float32Array","state","timeData","tick","bind","audio","window","AudioContext","sampleRate","createAnalyser","fftSize","createMediaStreamSource","connect","requestAnimationFrame","disconnect","cancelAnimationFrame","stopAudio","startAudio","time","getByteTimeDomainData","getFloatFrequencyData","setState","checkStatusUpdates","chordComponent","FreqVisualizer","TopBar","dropDowns","title","url","Nav","Link","href","Navbar","bg","expand","Container","Brand","Toggle","Collapse","id","App","BUFFER_MS","toggleMicrophone","a","navigator","mediaDevices","getUserMedia","video","getTracks","forEach","track","stop","stopMicrophone","getMicrophone","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9123c48e.chunk.js","sourcesContent":["import { FunctionComponent } from \"react\";\nimport ToggleButton from \"react-bootstrap/esm/ToggleButton\";\n\ninterface IStartButtonProps {\n    isRecording: boolean;\n    onClick: () => void;\n}\n\nconst RecordingButton: FunctionComponent<IStartButtonProps> = (props: IStartButtonProps) => {\n    let message = props.isRecording ? \"Stop Recording\" : \"Start Recording\";\n    let btnVariant = props.isRecording ? \"warning\" : \"success\";\n    \n    return (\n        <ToggleButton className=\"recordingButton\" type=\"checkbox\" value=\"1\"\n         variant={btnVariant}\n         checked={props.isRecording} \n         onClick={props.onClick}\n         >\n            {message}\n        </ToggleButton>\n    );\n}\n\nexport default RecordingButton;","import React from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Interval, Note, Scale } from \"@tonaljs/tonal\";\n\n\ninterface IChordAnalyzerProps {\n  freqData: Float32Array, // bin magnitudes\n  fs: number, // sampling rate\n  binCount: number, // amt of bins\n  width: number,\n  height: number\n}\n\ninterface IChordAnalyzerState {\n\n}\n\nclass ChordAnalyzer extends React.Component<IChordAnalyzerProps, IChordAnalyzerState> {\n  //state = {  : }\n\n  get binWidth() {\n    return this.props.fs / (2 * this.props.binCount);\n  }\n\n  constructor(props: IChordAnalyzerProps) {\n    super(props);\n  }\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n\n    this.render();\n  }\n\n  rollingMax(sourceArr: Float32Array, numMax: number): Array<Array<number>> {\n    // Arrays of 'num' loudest frequencies, and their magnitudes\n    // sorted from least to most loud\n    const fillVal = -Infinity;\n    let maxVals = Array<number>(numMax).fill(fillVal);\n    let maxValIdxs = Array<number>(numMax).fill(fillVal);\n\n    for (let curValIdx = 0; curValIdx < sourceArr.length; curValIdx++) {\n      const curVal = sourceArr[curValIdx];\n\n      // go through the max value array from largest to smallest,\n      // searching for a value that curVal is larger than. Once it finds\n      // that value, it inserts curval at that position and moves all the other\n      // values one down, erasing element 0.\n      for (let j = maxVals.length - 1; j >= 0; j--) {\n        let maxVal: number = maxVals[j];\n\n        if (curVal > maxVal) {\n          // Move each element down an index, removing maxVals[0]\n          for (let k = 0; k < j; k++) {\n            maxVals[k] = maxVals[k + 1];\n            maxValIdxs[k] = maxValIdxs[k + 1];\n          }\n\n          // insert the current value into the max array\n          maxVals[j] = curVal;\n          maxValIdxs[j] = curValIdx;\n\n          break;\n        }\n      }\n    }\n\n    return [maxVals, maxValIdxs];\n  }\n\n  getLargestNotes(num = 3): Array<number> {\n    const [maxBinMagnitudes, maxBins] = this.rollingMax(this.props.freqData, num);\n\n    // convert the bin indexes to their middle frequency\n    let binFreqs = maxBins.map(\n      (bin) => bin * this.binWidth + this.binWidth / 2\n    );\n\n    // console.log(this.props.freqData);\n\n    return binFreqs;\n  }\n\n\n  render() {\n    let topFreqs = this.getLargestNotes(2).reverse();\n\n    return (\n      <div>\n        <Row>\n          <Col>\n            {\n              topFreqs.map((note) => (\n                <p>{note.toFixed(2)}</p>\n              ))\n            }\n            <p>Bin width: {this.binWidth}</p>\n          </Col>\n          <Col>\n            {topFreqs.map((f) => <p>{Note.fromFreq(f)}</p>)}\n          </Col>\n        </Row>\n\n      </div>\n    );\n  }\n}\n\n\nexport default ChordAnalyzer;","import React from \"react\";\n\ninterface IFreqVisualizerProps {\n  freqData: Float32Array, // bin magnitudes\n  width: number,\n  height: number\n}\n\ninterface IFreqVisualizerState {\n  minFreq: number;\n}\n\nclass IFreqVisualizer extends React.Component<IFreqVisualizerProps, IFreqVisualizerState> {\n  canvas: React.RefObject<any>; // todo: what's the type?\n  discount: number = 0.8;\n\n  constructor(props: IFreqVisualizerProps) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { freqData, width, height } = this.props;\n\n    const canvas = this.canvas.current;\n    const canvasCtx = canvas.getContext('2d');\n    canvasCtx.clearRect(0, 0, width, height);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = '#000000';\n\n    let barWidth = (width / freqData.length) * 2.5;\n    let barHeight;\n    let x = 0;\n\n    const minFreq = freqData.reduce((prev,cur) => prev < cur ? prev : cur);\n    const zeroMag = minFreq;\n\n    for (const i in freqData) {\n      barHeight = (freqData[i] - minFreq)**1.2;\n\n      canvasCtx.fillStyle = `rgb(${barHeight},50,50,${barHeight})`;\n      canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n\n      x += barWidth;\n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <canvas className=\"timeDomGraph\"\n          width={this.props.width} height={this.props.height} ref={this.canvas} />\n        <p></p>\n      </div>\n    );\n  }\n}\n\nexport default IFreqVisualizer;","import React from 'react';\n\ninterface ITimeVisualizerProps {\n  audioData: Uint8Array,\n  width: number,\n  height: number\n}\n\n\nclass TimeVisualizer extends React.Component<ITimeVisualizerProps> {\n  canvas: React.RefObject<any>; // todo: what's the type?\n\n  constructor(props: ITimeVisualizerProps) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData, width, height } = this.props;\n    const canvas = this.canvas.current;\n\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const idx in audioData) {\n      const y = (audioData[idx] / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas className=\"timeDomGraph\" width={this.props.width} height={this.props.height} ref={this.canvas} />;\n  }\n}\n\nexport default TimeVisualizer;\n","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport ChordAnalyzer from './graphs/ChordVisualizer';\nimport FreqVisualizer from './graphs/FreqVisualizer';\nimport TimeVisualizer from './graphs/TimeVisualizer';\n// import AudioVisualiser from './AudioVisualiser';\n\n// https://www.twilio.com/blog/audio-visualisation-web-audio-api--react\n\n//TODO: should the audio logic be separate from a component?\n\ninterface IAudioManagerProps {\n  audio?: MediaStream | null;\n}\n\ninterface IAudioManagerState {\n  timeData: Uint8Array,\n  freqData: Float32Array\n}\n\nclass AudioManager extends React.Component<IAudioManagerProps, IAudioManagerState>  {\n  // audio state and analysis\n  audioContext?: AudioContext;\n  analyser?: AnalyserNode | null;\n  source?: MediaStreamAudioSourceNode | null;\n\n  audioActive: boolean = false; // if we're actively processing audio\n  readonly FFT_SIZE = 2048; // num bins in fft -- real + image\n  readonly SAMPLE_RATE = 16000;\n\n  // audio data buffers\n  timeDomainBuffer?: Uint8Array;\n  freqDomainBuffer?: Float32Array;\n\n  // the id for the latest animation frame request\n  framReqID: number = 0;\n\n\n  constructor(props: IAudioManagerProps) {\n    super(props);\n\n    this.timeDomainBuffer = new Uint8Array(this.FFT_SIZE);\n    this.freqDomainBuffer = new Float32Array(this.FFT_SIZE / 2);\n    this.state = {\n      timeData: this.timeDomainBuffer,\n      freqData: this.freqDomainBuffer,\n    };\n\n    this.tick = this.tick.bind(this);\n  }\n\n  // sets up analysis and source nodes, starts animation frame loop\n  startAudio(): void {\n    if (this.props.audio == null) return;\n\n    // retain audio context\n    if (this.audioContext == null) {\n      this.audioContext = new window.AudioContext(\n        { sampleRate: this.SAMPLE_RATE }\n      );\n    }\n\n    // set up the analysis node\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = this.FFT_SIZE;\n\n    // connect the stream to the analysis node\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n\n    this.audioActive = true;\n    this.framReqID = requestAnimationFrame(this.tick); // start animation loop\n  }\n\n\n  stopAudio(): void {\n    // disconnect and delete the audio nodes\n    this.analyser?.disconnect();\n    this.source?.disconnect();\n    this.analyser = null;\n    this.source = null;\n\n    this.audioActive = false;\n    cancelAnimationFrame(this.framReqID); // stop animation loop\n  }\n\n\n  // monitors for if we should update the state of the audio processing\n  checkStatusUpdates() {\n    if (this.props.audio != null && !this.audioActive) {  // if we didn't have audio but now we do\n      this.startAudio();\n    } else if (this.props.audio == null && this.audioActive) {  // if we had audio but now we dont\n      this.stopAudio();\n    }\n  }\n\n\n\n\n\n  // done each animation tick -- i think before each frame render\n  // TODO: see if you can put the audio data extraction in a timer\n  tick(time: number) {\n    if (this.analyser && this.timeDomainBuffer && this.freqDomainBuffer) {\n\n      // get data \n      this.analyser.getByteTimeDomainData(this.timeDomainBuffer);\n      this.analyser.getFloatFrequencyData(this.freqDomainBuffer);\n      this.setState({\n        timeData: this.timeDomainBuffer,\n        freqData: this.freqDomainBuffer\n      });\n\n      // updates an onscreen animation and retriggers this function --  oneshot\n      this.framReqID = requestAnimationFrame(this.tick);\n    }\n  }\n\n\n  render() {\n    this.checkStatusUpdates();\n\n    let chordComponent = this.audioContext == null ? '' : (\n      <ChordAnalyzer\n        freqData={this.state.freqData}\n        fs={this.audioContext?.sampleRate ?? 0}\n        binCount={this.FFT_SIZE / 2}\n        width={300} height={300} />\n    );\n\n    return (\n      <div>\n        <Row>\n          <Col>\n            <TimeVisualizer audioData={this.state.timeData} width={300} height={300} />\n          </Col>\n          <Col>\n            <FreqVisualizer freqData={this.state.freqData} width={300} height={300} />\n          </Col>\n        </Row >\n\n        <Row>\n          <Col>\n          <div>\n            {chordComponent}\n            </div>\n          </Col>\n        </Row>\n\n      </div>\n    );\n  }\n\n\n  componentDidMount() {\n    this.checkStatusUpdates();\n  }\n\n  componentWillUnmount() {\n    this.stopAudio();\n  }\n}\n\nexport default AudioManager;\n","import { FunctionComponent } from \"react\";\nimport { Navbar, Container, Nav, NavDropdown } from \"react-bootstrap\";\n\ninterface ITopBarProps {\n    // fill drop down components from App?\n}\n\ntype LinkFormat = string[][];\n\nconst TopBar: FunctionComponent<ITopBarProps> = (props: ITopBarProps) => {\n    let dropDowns = [\n        [\"Library\", \"http://www.omfgdogs.com/#\"]\n    ].map(([title, url]) => \n         <Nav.Link href={url}>{title}</Nav.Link>\n    );\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" className=\"topBar\">\n            <Container>\n                <Navbar.Brand href=\"#home\">Bazamjam</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                    {dropDowns}\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default TopBar;","import React, { ReactElement } from 'react';\nimport './App.css';\nimport RecordingButton from './RecordingButton';\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport AudioManager from './AudioManager';\nimport { Col, Container, Navbar, Row } from 'react-bootstrap';\nimport TopBar from './TopBar';\n\n\ntype AppState = {\n  audio: MediaStream | null;\n};\n\n\nclass App extends React.Component<{}, AppState> {\n  BUFFER_MS: number = 50;\n\n  constructor() {\n    super({});\n\n    this.state = {\n      audio: null\n    };\n\n    this.toggleMicrophone = this.toggleMicrophone.bind(this);\n  }\n\n\n  async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    this.setState({ audio });\n  }\n\n  stopMicrophone() {\n    if (this.state.audio) {\n      this.state.audio.getTracks().forEach(track => track.stop());\n      this.setState({ audio: null });\n    }\n  }\n\n  toggleMicrophone() {\n    if (this.state.audio) {\n      this.stopMicrophone();\n    } else {\n      this.getMicrophone();\n    }\n  }\n\n\n  render(): ReactElement {\n    const audio = this.state.audio;\n\n    return (\n      <div className=\"App\">\n        <TopBar />\n        <Container className=\"controls\">\n          <Row className=\"justify-content-center\">\n            <RecordingButton isRecording={this.state.audio !== null} onClick={this.toggleMicrophone} />\n          </Row>\n\n          <Row>\n            <AudioManager audio={audio} />\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}