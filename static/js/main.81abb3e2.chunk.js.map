{"version":3,"sources":["logic/Recorder.ts","logic/AudioManager.ts","components/dashboard_components/SampleComponent.tsx","components/dashboard_components/SoundGraph.tsx","components/dashboard_components/Recorder.tsx","components/Dashboard.tsx","components/Sidebar.tsx","routes/App.tsx","reportWebVitals.ts","components/AlertDismissable.tsx","components/MidiMouthForm.tsx","routes/MidiMouth.tsx","index.tsx"],"names":["Recorder","fs","recording","this","data","push","Array","from","emptyBuffer","Float32Array","AudioManager","audioContext","_nodes","nodeConnections","analyser","source","audioStream","_timeBuffer","_freqBuffer","_recorder","audioActive","FFT_SIZE","SAMPLE_RATE","addSourceNode","MediaStreamAudioSourceNode","mediaStream","addNode","outputs","window","AudioContext","sampleRate","analyzer","AnalyserNode","fftSize","active","navigator","mediaDevices","getUserMedia","audio","video","getTracks","every","track","enabled","forEach","getTimeData","bind","getFreqData","a","initAudio","bigIfTrue","getFloatTimeDomainData","getFloatFrequencyData","node","key","conn","Error","inputs","inputKey","connectNodes","outputKey","srcNodeKey","dstNodeKey","connect","SampleComponent","forwardRef","ref","className","style","props","children","text","textAlign","SoundGraph","movement_timer","canvasRef","useRef","containerRef","useState","dimensions","setDimensions","test_dimensions","current","width","offsetWidth","height","offsetHeight","useLayoutEffect","addEventListener","clearInterval","setTimeout","displayGraph","isRecording","canvas","getContext","setAttribute","toString","context","audioData","x","sliceWidth","length","strokeStyle","sample","i","y","r","fillRect","draw","soundData","icons","recordOn","size","recordOff","pauseOn","pauseOff","setIsRecording","setSoundData","setRecording","intervalId","setIntervalId","recordingIcon","updateTimeData","timeData","audioManager","prev","updatePeriod","useEffect","interval","setInterval","onClick","newRecordingState","startRecording","console","log","stopRecording","ReactGridLayout","WidthProvider","RGL","gridProps","rowHeight","cols","verticalCompact","isBounded","onLayoutChange","defaultDashboardLayout","temp1","element","layout","w","h","temp2","recorderLayout","static","Dashboard","dshbLayout","builtElements","useMemo","components","map","comp","createElement","timeLog","menuClosed","menuOpen","library","settings","sourceCode","contact","login","logout","midimouth","Sidebar","isMobile","isClosed","setIsClosed","useAuth0","loginWithRedirect","isAuthenticated","title","openCloseIcon","onLibaryClick","onSettingsClick","collapsed","iconShape","icon","to","href","returnTo","location","origin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AlertDismissable","show","setShow","variant","Alert","onClose","dismissible","Heading","header","message","formatName","name","id","prefix","trim","RequestStatus","MidiMouthForm","songOptions","instrumentOptions","sourceSongs","setSourceSongs","instruments","setInstruments","songChoice","setSongChoice","instrumentChoice","setInstrumentChoice","userSoundFile","setUserSoundFile","keyShift","setKeyShift","loading","setLoading","errMsg","setErrMsg","allInstrumentsKey","allowInstruments","Object","entries","songId","songName","value","instrId","instrName","formData","FormData","append","keys","params","paramString","join","queryString","apiRoot","fetch","method","body","headers","accept","res","json","result","setOutputSong","error","Form","onSubmit","event","preventDefault","sendSongRequest","InputGroup","Text","Control","type","onChange","e","target","files","Select","disabled","selected","Accordion","Item","eventKey","Header","Body","evt","placeholder","Check","label","Button","API_URL","MidiMouth","outputSongId","setOutputSongId","None","songUrl","ReactPlayer","canPlay","Card","url","config","file","forceAudio","controls","ReactDOM","render","domain","clientId","redirectUri","audience","scope","path","document","getElementById"],"mappings":"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","file":"static/js/main.81abb3e2.chunk.js","sourcesContent":["\n\nclass Recorder {\n    public recording: Array<number>;\n    private fs: number;\n\n    constructor(fs: number) {\n        this.recording = [];\n        this.fs = fs;\n    }\n\n    addData(data: Float32Array) {\n        this.recording.push(...Array.from(data));\n    }\n\n    getRecording(): Array<number> {\n        return this.recording;\n    }\n\n    clearRecording() {\n        this.recording = [];\n    }\n}\n\nexport default Recorder;","import Recorder from \"./Recorder\";\n\n\n// A string-indexed list of nodes. Essentially a dict\ninterface INodes {\n  [key: string]: AudioNode;\n}\n\n// \ntype nodeKey = keyof INodes;\n\n// A string-indexed list of nodes. Essentially a dict\ninterface INodeConnections {\n  [src: nodeKey]: nodeKey;\n}\n\nconst emptyBuffer = new Float32Array(0);\n\n\n// TODO: Add recording loop in here instead of react components\n\nclass AudioManager {\n  // audio state and analysis\n  audioContext?: AudioContext;\n\n  _nodes: INodes; // essentially a dictionary of nodes\n  nodeConnections: INodeConnections;\n\n  analyser?: AnalyserNode | null;\n  source?: MediaStreamAudioSourceNode | null;\n  audioStream?: MediaStream | null;\n\n  _timeBuffer: Float32Array;\n  _freqBuffer: Float32Array;\n\n  _recorder: Recorder;\n\n  audioActive: boolean = false; // if we're actively processing audio\n  readonly FFT_SIZE = 2048; // num bins in fft -- real + image\n  readonly SAMPLE_RATE = 16000;\n\n  public get nodes() {\n    return this._nodes;\n  }\n\n\n  constructor() {\n    this._nodes = {};\n    this.nodeConnections = {};\n\n    this._timeBuffer = new Float32Array(this.FFT_SIZE);\n    this._freqBuffer = new Float32Array(this.FFT_SIZE / 2);\n\n    this._recorder = new Recorder(this.SAMPLE_RATE);\n  }\n\n  // Initializes the audio context and nodes. Must be called from a user gesture\n  //TODO: How to avoid re-doing this w/ every click?\n  private async initAudio(): Promise<boolean> {\n    // audio context must be created in a user gesture\n    if (this.audioContext == null) {\n      this.audioContext = new window.AudioContext({ sampleRate: this.SAMPLE_RATE });\n    }\n\n    // Initialize analyzer node\n\n    if (this._nodes['analyzer'] == null) {\n      let analyzer = new AnalyserNode(this.audioContext, { fftSize: this.FFT_SIZE });\n      this.addNode(analyzer, \"analyzer\");\n    }\n\n    if (this.audioStream == null || !this.audioStream?.active) {\n      this.audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\n      this.addSourceNode();\n    } else if (this.audioStream?.getTracks().every((track) => track.enabled == false)) {\n      this.audioStream?.getTracks().forEach(track => track.enabled = true);\n    }\n\n\n    if (this._nodes['source'] == null) {\n      this.addSourceNode();\n    }\n\n    // Lets them be used in callbacks\n    this.getTimeData.bind(this);\n    this.getFreqData.bind(this);\n\n    return true;\n  }\n\n  /*\n  ==== Audio input ===== \n  */\n\n  async startRecording(): Promise<boolean> {\n    let bigIfTrue = await this.initAudio();\n    this.audioActive = bigIfTrue;\n    return bigIfTrue;\n  }\n\n\n  stopRecording(): void {\n    this.audioStream?.getTracks().forEach(track => track.enabled = false);\n    this.audioActive = false;\n  }\n\n\n  public getTimeData(): Float32Array {\n    let analyzer = this._nodes['analyzer'];\n    if (analyzer instanceof AnalyserNode) {\n      // TODO: this has weird behavior... doesn't always output right thing\n      analyzer.getFloatTimeDomainData(this._timeBuffer);\n      return this._timeBuffer;\n    }\n    return emptyBuffer;\n  }\n\n  public getFreqData(): Float32Array {\n    let analyzer = this._nodes['analyzer'];\n    if (analyzer instanceof AnalyserNode) {\n      analyzer.getFloatFrequencyData(this._freqBuffer);\n      return this._freqBuffer;\n    }\n    return emptyBuffer;\n  }\n\n\n  /*\n  ==== Audio graph structure ===== \n  */\n\n  public addNode(node: AudioNode, key: string, conn?: { inputs?: string[], outputs?: string[] }) {\n    if (key in this._nodes) {\n      throw new Error(\"Key already exists in audio graph\");\n    }\n    this._nodes[key] = node;\n\n    // connect the inputs for this node to it\n    if (conn?.inputs) {\n      conn.inputs.forEach((inputKey) => this.connectNodes(inputKey, key));\n    }\n\n    // connect this node to the ones it outputs to\n    if (conn?.outputs) {\n      conn.outputs.forEach((outputKey) => this.connectNodes(key, outputKey));\n    }\n  }\n\n  public nodeExists(key: string) {\n    return key in this._nodes;\n  }\n\n  // conencts two audio nodes -- true on success\n  private connectNodes(srcNodeKey: nodeKey, dstNodeKey: nodeKey) {\n    if (!(srcNodeKey in this._nodes) && !(dstNodeKey in this._nodes)) {\n      throw new Error(\"At least one provided key is invalid\");\n    }\n\n    this._nodes[srcNodeKey].connect(this._nodes[dstNodeKey]);\n    this.nodeConnections[srcNodeKey] = dstNodeKey;\n  }\n\n\n  private addSourceNode = () => {\n    if (this.audioContext && this.audioStream) {\n      let source = new MediaStreamAudioSourceNode(this.audioContext, { mediaStream: this.audioStream });\n      this.addNode(source, \"source\", { outputs: [\"analyzer\"] });\n    }\n  }\n\n}\n\nexport default AudioManager;","import { forwardRef, FunctionComponent } from \"react\";\nimport { IDashboardComponentProps } from \"./DshbComp\";\n\ninterface SampleComponentProps extends IDashboardComponentProps {\n  text?: string;\n}\n\nconst SampleComponent: FunctionComponent<SampleComponentProps>\n  = forwardRef(({ className, style = {}, children, ...props }, ref) => {\n    let { text = \"Hi there\" } = props;\n    return (\n      <div {...props}\n        style={{ ...style }}\n        className={className + \" recorder\"}\n        ref={ref as React.RefObject<HTMLDivElement>}>\n        <div style={{ textAlign: 'center' }}>{text}</div>\n      </div>\n    );\n  });\n\nexport default SampleComponent;","import { FunctionComponent, useLayoutEffect, useRef, useState } from \"react\";\n\n\ninterface ISoundGraphProps {\n  soundData: Float32Array;\n  isRecording: boolean;\n}\n\ninterface IDimensions {\n  width: number;\n  height: number;\n}\n\n\nfunction draw(context: CanvasRenderingContext2D, audioData: Float32Array,\n  width: number, height: number\n) {\n  let x = 0;\n  const noiseFloor = 3;\n  const sliceWidth = width / audioData.length;\n\n  context.strokeStyle = '#ffffff';\n\n  // TODO: run a gaussian filter or smtn\n  audioData.forEach((sample, i) => {\n    let sampleHeight = sample * height/2;\n    let y = sampleHeight + height/2;\n\n    let r = sliceWidth * 5;\n    context.fillRect(x, y, r, r );\n\n    x += sliceWidth;\n  });\n}\n\nconst SoundGraph: FunctionComponent<ISoundGraphProps> = (props: ISoundGraphProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n\n  const [dimensions, setDimensions] = useState<IDimensions>();\n\n\n  //TODO: Dimensions still don't update right when the canvas\n  // is being drawn and the window gets large than smaller\n\n  // holds the timer for setTimeout and clearInterval\n  let movement_timer: NodeJS.Timer;\n\n  // the number of ms the window size must stay the same size before the\n  // dimension state variable is reset\n  const RESET_TIMEOUT = 100;\n\n  const test_dimensions = () => {\n    if (containerRef.current) {\n      setDimensions({\n        width: containerRef.current.offsetWidth,\n        height: containerRef.current.offsetHeight\n      });\n    }\n  }\n\n  // This sets the dimensions on the first render\n  useLayoutEffect(() => {\n    test_dimensions();\n  }, []);\n\n  // every time the window is resized, the timer is cleared and set again\n  // the net effect is the component will only reset after the window size\n  // is at rest for the duration set in RESET_TIMEOUT.  This prevents rapid\n  // redrawing of the component for more complex components such as charts\n  window.addEventListener('resize', () => {\n    clearInterval(movement_timer);\n    if (!movement_timer) {\n      // clearInterval(movement_timer);\n\n      movement_timer = setTimeout(test_dimensions, RESET_TIMEOUT);\n    }\n  });\n\n\n\n  // Redraw canvas on new sound data\n  let displayGraph = props.isRecording && dimensions != null;\n  useLayoutEffect(() => {\n    if (displayGraph) {\n      let { width, height } = dimensions!;\n      const canvas = canvasRef.current?.getContext('2d');\n\n      if (canvas != null) {\n        canvasRef.current!.setAttribute(\"width\", width.toString());\n        canvasRef.current!.setAttribute(\"height\", height.toString());\n        draw(canvas, props.soundData, width, height);\n      }\n    }\n  }, [dimensions?.width, dimensions?.height, props.soundData[0], displayGraph]);\n\n\n\n  return (\n    <div className=\"timeDomGraph\" ref={containerRef}>\n      { // draw if width and height are set\n        displayGraph &&\n        <canvas ref={canvasRef} width={dimensions!.width} height={dimensions!.height} />\n      }\n    </div>\n  );\n}\n\nexport default SoundGraph;","import { FunctionComponent, useState, forwardRef, useEffect, useCallback } from \"react\";\n\nimport { TiMediaRecord, TiMediaRecordOutline, TiMediaPauseOutline, TiMediaPlayOutline } from \"react-icons/ti\";\nimport AudioManager from \"../../logic/AudioManager\";\nimport { IDashboardComponentProps } from \"./DshbComp\";\nimport SoundGraph from \"./SoundGraph\";\n\nconst icons = {\n  recordOn: <TiMediaRecord size={100} />,\n  recordOff: <TiMediaRecordOutline size={100} />,\n  pauseOn: <TiMediaPlayOutline size={100} />,\n  pauseOff: <TiMediaPauseOutline size={100} />\n};\n\n\nexport interface IRecorderProps extends IDashboardComponentProps {\n  audioManager: AudioManager;\n}\n\nconst Recorder: FunctionComponent<IRecorderProps> = forwardRef(({ className, style = {}, children, ...props }, ref) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [soundData, setSoundData] = useState(new Float32Array(0));\n  const [recording, setRecording] = useState(new Float32Array(0));\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout>();\n\n  // display properties\n  let recordingIcon = isRecording ? icons.recordOn : icons.recordOff;\n  let playPauseIcon = isPlaying ? icons.pauseOff : icons.pauseOn;\n  let recordingText = isRecording ? \"Recording...\" : \"  \";\n\n  // functions\n  let onPlayPauseClick = () => setIsPlaying(!isPlaying);\n  \n\n  let onRecordClick = () => {\n    let newRecordingState = !isRecording;\n    if (newRecordingState) {\n      props.audioManager.startRecording();\n      console.log(\"\\n\\nstarted\\n\")\n    }\n    else {\n      props.audioManager.stopRecording();\n      console.log(\"\\n\\nstopped\\n\")\n    }\n    setIsRecording(newRecordingState);\n  };\n  \n\n  const updateTimeData = () => {\n    let timeData = new Float32Array(props.audioManager.getTimeData());\n    setSoundData(timeData);\n\n    // let newRecording = new Float32Array(timeData.length + recording.length);\n    // newRecording.set(recording);\n    // newRecording.set(timeData, recording.length);\n    setRecording((prev) => new Float32Array([...Array.from(prev), ...Array.from(timeData)]));\n  };\n\n  let updatePeriod =  props.audioManager.FFT_SIZE / props.audioManager.SAMPLE_RATE;\n\n\n  // start timer when record is hit -- stop it once is record is off\n  useEffect(() => {\n    if (isRecording) {\n      const interval = setInterval(updateTimeData, updatePeriod);\n      setIntervalId(interval);\n    }\n    else if (intervalId != null) {\n      clearInterval(intervalId);\n    }\n  }, [isRecording]);\n\n\n//   console.log(recording.length);\n\n// could use key={soundData[0]} and other keys to only rerender sound graph\n  return (\n    <div\n      {...props}\n      style={{ ...style }}\n      className={className + \" recorder\"}\n      ref={ref as React.RefObject<HTMLDivElement>}\n    >\n      <div className=\"recorder-controls\">\n        <div onClick={onRecordClick}>{recordingIcon}</div>\n        {/* <p>{recordingText}</p> */}\n      </div>\n\n      <SoundGraph soundData={soundData} isRecording={isRecording}/>\n\n      {/* <div onClick={onPlayPauseClick}>{playPauseIcon}</div> */}\n\n      {children}\n    </div>\n  );\n});\n\nexport default Recorder;","import {  createElement, FunctionComponent, ReactElement, useMemo, useState } from \"react\";\nimport \"../assets/App.css\";\n\n// grid\nimport RGL, { Layout, ReactGridLayoutProps, WidthProvider } from 'react-grid-layout';\nimport '../assets/grid_styles.css';\nimport '../assets/resizable_styles.css';\nimport AudioManager from \"../logic/AudioManager\";\nimport SampleComponent from \"./dashboard_components/SampleComponent\";\nimport Recorder from \"./dashboard_components/Recorder\";\n\n\nconst ReactGridLayout = WidthProvider(RGL);\n\n\n/*\n =========== types\n*/\n\n\nexport interface IGridComponent<T> {\n  element: FunctionComponent<T>;\n  props: T;\n  layout: Layout;\n  children?: React.ReactNode[];\n}\n\ninterface IDashboardProps {\n}\n\n/*\n =========== constants\n*/\n\nconst gridProps: ReactGridLayoutProps = {\n  // layout: defaultLayouts.lg,\n  rowHeight: 200,\n  cols: 3,\n  verticalCompact: true,\n  isBounded: true,\n  onLayoutChange: function () { },\n};\n\nconst defaultDashboardLayout: { [key: string]: IGridComponent<any> } = {\n  temp1: {\n    element: SampleComponent,\n    props: {},\n    layout: { i: '1', x: 0, y: 0, w: 1, h: 1 }\n  },\n  temp2: {\n    element: SampleComponent,\n    props: {},\n    layout: { i: '2', x: 1, y: 1, w: 1, h: 1 }\n  }\n};\n\n\nconst recorderLayout = { i: 'recorder', x: 0, y: 0, w: 3, h: 1, static: true };\n\n\n/*\n =========== functions\n*/\n\n// applys the layouts to the passed in items and creates some grid-items out of them\nfunction buildComponents(components: IGridComponent<any>[]): ReactElement[] {\n  console.log(\"Components built\");\n\n  return components.map((comp: IGridComponent<any>, i) =>\n    createElement(comp.element, {\n      props: comp.props, // passed in props\n\n      // props for grid-itemsa\n      className: \"dashboard-component\",\n      key: comp.layout.i,\n      \"data-grid\": comp.layout\n    }, comp.children)\n  );\n}\n\nconst Dashboard: FunctionComponent<IDashboardProps> = (props: IDashboardProps) => {\n  const [audioManager, setaudioManager] = useState(new AudioManager());\n  const [dshbLayout, setDshbLayout] = useState([defaultDashboardLayout.temp1,defaultDashboardLayout.temp2]);\n  // execute on first build\n\n\n  // TODO: How often does this get built? is it a side-effect?\n  let builtElements: ReactElement[] = useMemo(() =>\n    buildComponents(dshbLayout)\n    , [dshbLayout]\n  );\n  console.timeLog(\"dashboard\");\n\n  // https://github.com/react-grid-layout/react-grid-layout\n  return (\n    <div className=\"dashboard\">\n      <ReactGridLayout className=\"grid\" {...gridProps}>\n        <Recorder className=\"dashboard-component\" audioManager={audioManager}\n          data-grid={recorderLayout} key={recorderLayout.i} />\n\n        {builtElements}\n      </ReactGridLayout>\n    </div >\n  );\n}\n\nexport default Dashboard;\n","import { FunctionComponent, useState } from \"react\";\nimport { ProSidebar, Menu, MenuItem, SidebarHeader, SidebarContent, SidebarFooter } from 'react-pro-sidebar';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from \"react-router-dom\";\n\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport { TiPencil } from 'react-icons/ti';\nimport { GiAudioCassette } from 'react-icons/gi';\nimport { BiCodeCurly, BiArrowFromRight, BiArrowFromLeft } from 'react-icons/bi';\nimport { BsGear } from 'react-icons/bs';\nimport { MdAccountCircle, } from 'react-icons/md';\nimport { RiDoorClosedLine, RiDoorLockLine, RiDoorOpenLine } from 'react-icons/ri';\nimport { CgSmileMouthOpen } from 'react-icons/cg';\n\n\nconst icons = {\n  menuClosed: <BiArrowFromLeft />,\n  menuOpen: <BiArrowFromRight />,\n  library: <GiAudioCassette />,\n  settings: <BsGear />,\n  sourceCode: <BiCodeCurly />,\n  contact: <TiPencil />,\n  login: <RiDoorClosedLine />,\n  logout: <RiDoorClosedLine />,\n  midimouth: <CgSmileMouthOpen />,\n};\n\ninterface ISidebarProps {\n  isMobile?: boolean;\n}\n\nconst Sidebar: FunctionComponent<ISidebarProps> = (props: ISidebarProps) => {\n  const [isClosed, setIsClosed] = useState(props.isMobile == true);    // if it's mobile, start closed\n  const { loginWithRedirect, logout, isAuthenticated } = useAuth0();\n\n  // display properties\n  let title = isClosed ? \"BzJ\" : \"BazamJam\";\n  let width = props.isMobile ? \"20px\" : \"175px\";\n  let openCloseIcon = isClosed ? icons.menuClosed : icons.menuOpen;\n\n  // functions\n  let handleClose = () => setIsClosed(!isClosed);\n  let onLibaryClick = isAuthenticated ? () => { } : loginWithRedirect;\n  let onSettingsClick = isAuthenticated ? () => { } : loginWithRedirect;\n\n\n  // logic\n  if (props.isMobile && !isClosed) {\n    setIsClosed(true);\n  }\n\n\n  return (\n    <div className=\"sidebar\">\n      <ProSidebar collapsed={isClosed} width={width}>\n\n        <SidebarHeader className=\"title-header\">\n          {title}\n        </SidebarHeader>\n\n        <SidebarContent>\n          <Menu iconShape=\"round\">\n            {!isAuthenticated &&\n              <MenuItem icon={icons.login} onClick={() => loginWithRedirect()}>\n                Sign in\n              </MenuItem>}\n\n            <MenuItem icon={icons.midimouth}>\n              <Link to=\"/midi-mouth\">MidiMouth</Link>\n            </MenuItem>\n\n            <MenuItem icon={icons.library} onClick={() => onLibaryClick()}>\n              {isAuthenticated ? <a href=\"https://omfgdogs.com/\">Library</a> : \"Library\"}\n            </MenuItem>\n\n            <MenuItem icon={icons.settings} onClick={() => onSettingsClick()}>\n              {isAuthenticated ? <a href=\"https://omfgdogs.com/\">Settings</a> : \"Settings\"}\n            </MenuItem>\n\n            <MenuItem icon={openCloseIcon} onClick={handleClose}>\n              Minimize\n            </MenuItem>\n\n          </Menu>\n        </SidebarContent>\n\n        <SidebarFooter>\n          <Menu iconShape=\"round\">\n            {isAuthenticated &&\n              <MenuItem icon={icons.logout} onClick={() => logout({ returnTo: window.location.origin })}>\n                Log out\n              </MenuItem>\n            }\n            <MenuItem icon={icons.contact}>\n              <a href=\"mailto:davidhaas6@gmail.com\">Contact</a>\n            </MenuItem>\n            <MenuItem icon={icons.sourceCode}>\n              <a href=\"https://github.com/davidhaas6/bazamjam\">Source</a>\n            </MenuItem>\n\n          </Menu>\n        </SidebarFooter>\n\n      </ProSidebar>\n    </div>\n  );\n}\n\nexport default Sidebar;","import  { FunctionComponent } from 'react';\nimport \"../assets/App.css\";\n\nimport Dashboard from '../components/Dashboard';\nimport Sidebar from '../components/Sidebar';\n\nimport 'react-bootstrap'\n\ninterface IAppProps {\n  \n}\n \nconst App: FunctionComponent<IAppProps> = (props: IAppProps) => {\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Dashboard />\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FunctionComponent, useState } from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\n\ninterface IAlertDismissableProps {\n    header: string;\n    message: string;\n    closeMessage?: string;\n    variant?: \"success\" | \"danger\" | \"warning\" | \"info\";\n}\n\nconst AlertDismissable: FunctionComponent<IAlertDismissableProps> = (props: IAlertDismissableProps) => {\n    const [show, setShow] = useState(true);\n    let variant = props.variant || \"success\";\n\n    return (\n        <>\n            <Alert show={show} variant={variant} \n            onClose={() => setShow(false)} \n            dismissible={true}\n            >\n                <Alert.Heading>{props.header}</Alert.Heading>\n                {props.message}\n            </Alert>\n        </>\n    );\n}\n\nexport default AlertDismissable;","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { Accordion, Button, Card, Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport AlertDismissable from \"./AlertDismissable\";\n\ninterface MidiMouthFormProps {\n  apiRoot: string;\n  setOutputSong: (outputSongId: string) => void;\n}\n\n\nfunction formatName(name: string, id: string, prefix?: string): string {\n  name = name.trim();\n  if (name.length === 0) {\n    name = id;\n    if (prefix) {\n      name = prefix + \" \" + name;\n    }\n  }\n  return name;\n}\n\nconst MidiMouthForm: FunctionComponent<MidiMouthFormProps> = (props: MidiMouthFormProps) => {\n  const [sourceSongs, setSourceSongs] = useState<Object>();\n  const [instruments, setInstruments] = useState<Object>();\n\n  const [songChoice, setSongChoice] = useState<string>();\n  const [instrumentChoice, setInstrumentChoice] = useState<string>();\n  const [userSoundFile, setUserSoundFile] = useState()\n  const [keyShift, setKeyShift] = useState<number>(0);\n  const [allTracksChoice, setAllTracksChoice] = useState<boolean>();\n\n  const [loading, setLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState<string>(\"\");\n\n  // let ifSongChosenProps = {'d'}\n  let allInstrumentsTitle = \"All Instruments\";\n  let allInstrumentsKey = \"-1\"\n  let allowInstruments: boolean = songChoice != null && instruments != null;\n  let allInstrsSelected = instrumentChoice == \"\";\n\n  let songOptions, instrumentOptions;\n\n  if (sourceSongs) {\n    let entries = Object.entries(sourceSongs!);\n    songOptions = entries.map(\n      ([songId, songName]) => <option value={songId}>{formatName(songName, songId, \"Song\")}</option>\n    );\n  }\n  if (instruments) {\n    let entries = Object.entries(instruments!);\n    instrumentOptions = entries.map(\n      ([instrId, instrName]) => <option value={instrId}>{formatName(instrName, instrId, \"Instrument\")}</option>);\n  }\n\n\n  // Load song options\n  useEffect(() => {\n    fetch(props.apiRoot + \"get_songs\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          setSourceSongs(result);\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      );\n  }, []);\n\n  // Load instrument options\n  useEffect(() => {\n    if (songChoice == null || sourceSongs == null) return;\n    // reset instrument selection\n    setInstrumentChoice(allInstrumentsKey);\n\n    // get new instruments\n    console.log(\"Fetching instruments for: \" + sourceSongs[songChoice]);\n    fetch(props.apiRoot + \"get_instruments?song_id=\" + songChoice)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          setInstruments(result);\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      );\n  }, [songChoice]);\n\n  // Send song generation request\n  async function sendSongRequest() {\n    var formData = new FormData();\n    formData.append('user_sample', userSoundFile);\n    console.log(\"formdata: \", Array.from(formData.keys()));\n\n    let params = {\n      \"song_id\": songChoice,\n      \"instrument_num\": instrumentChoice,\n      \"key_shift\": keyShift,\n      \"all_tracks\": instrumentChoice == allInstrumentsKey,\n    };\n\n\n    let paramString = Object.keys(params).map(key => key + \"=\" + params[key]).join(\"&\");\n    let queryString = props.apiRoot + \"create_song\" + \"?\" + paramString;\n    console.log(\"fetching: \" + queryString);\n    setLoading(true);\n    fetch(queryString, {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        accept: \"application/json\",\n        // \"Content-Type\": \"multipart/form-data\"\n      },\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          props.setOutputSong(result['song'])\n          setLoading(false);\n        },\n        (error) => {\n          console.log(error);\n          setErrMsg(error.message);\n        }\n      );\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"submitting\");\n    if (!userSoundFile) {\n      setErrMsg(\"Please select a sound file.\");\n      console.log(\"no file selected\");\n      return;\n    } else {\n      console.log(\"file: \" + userSoundFile);\n    }\n    sendSongRequest();\n  }\n\n  // console.log(\"all instruments: \" + allInstrsSelected)\n\n  return (\n    <div className=\"midi-form\">\n      <Form onSubmit={handleSubmit}>\n        {errMsg.length > 0 && <AlertDismissable message={errMsg} variant=\"danger\" header=\"Error\" />}\n\n        {/* input sound */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>🎤</InputGroup.Text>\n          <Form.Control type=\"file\" size=\"lg\" accept=\".wav\"\n            onChange={(e) => setUserSoundFile(e.target.files[0])} />\n        </InputGroup>\n\n        {/* song selection */}\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text>🎼</InputGroup.Text>\n          <Form.Select size=\"lg\" onChange={(event) => setSongChoice(event.target.value)}>\n            <option disabled={true} selected={!songChoice}>Select a song</option>\n            {songOptions}\n          </Form.Select>\n        </InputGroup>\n\n        {/* instrument selection */}\n        <InputGroup className=\"mb-3\"  >\n          <InputGroup.Text>🎷</InputGroup.Text>\n          <Form.Select size=\"lg\"\n            value={instrumentChoice}\n            disabled={songChoice == null}\n            onChange={(event) => setInstrumentChoice(event.target.value)\n            }\n          >\n            {allowInstruments && (\n              <option value={allInstrumentsKey}>{allInstrumentsTitle}</option>\n            )}\n            {allowInstruments ?\n              instrumentOptions\n              : <option>Must select a song</option>}\n          </Form.Select>\n        </InputGroup>\n\n        {/* advanced options */}\n        <Accordion className=\"mb-3\">\n          <Accordion.Item eventKey=\"0\">\n            <Accordion.Header>Other Options</Accordion.Header>\n            <Accordion.Body className=\"midi-advanced-options\">\n\n              {/* key shift */}\n              <InputGroup className=\"mb-3\" onChange={(evt) => setKeyShift(evt.target.value)} >\n                <InputGroup.Text>Note Shift</InputGroup.Text>\n                <Form.Control type=\"number\" placeholder=\"0\" />\n              </InputGroup>\n\n              {/* key shift */}\n              <InputGroup className=\"mb-3\"  >\n                <Form.Check label=\"Include drums\" />\n              </InputGroup>\n\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n\n        {/* submit button */}\n        <div className=\"mb-3 text-center\" >\n          <Button variant=\"success\" size=\"lg\" type=\"submit\" disabled={loading}>\n            {loading ? \"Processing...\" : \"Create Song 👄\"}\n          </Button>\n        </div>\n\n      </Form >\n    </div >\n  );\n}\n\nexport default MidiMouthForm;","import { FunctionComponent, useState } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport ReactPlayer from \"react-player\";\nimport AlertDismissable from \"../components/AlertDismissable\";\nimport MidiMouthForm from \"../components/MidiMouthForm\";\nimport MMAudioPlayer from \"../components/MMAudioPlayer\";\n\ninterface MidiMouthProps {\n\n}\n\nenum RequestStatus {\n    None,\n    Submitted,\n    Success,\n    Error\n}\n\nconst WELCOME_MESSAGE = \"Make a song with your voice! Choose a sound clip, song, and go!\";\nconst API_URL = \"http://127.0.0.1:8000/\";\n\nfunction downloadSong(song: string) {\n    const url = API_URL + \"download_song?song_id=\" + song;\n    fetch(url);\n    // window.open(url);\n}\n\nconst MidiMouth: FunctionComponent<MidiMouthProps> = () => {\n    const [outputSongId, setOutputSongId] = useState(\"\");\n    const [songCreationStatus, setSongCreationStatus] = useState(RequestStatus.None);\n    let songUrl = API_URL + outputSongId;\n    console.log(ReactPlayer.canPlay(songUrl))\n    return (\n        <main className=\"midi-main\">\n            <h1 className=\"midi-header\">Midi Mouth 🎶👄🎶</h1>\n            <AlertDismissable\n                header=\"Howdy!\"\n                message={WELCOME_MESSAGE}\n            />\n            <MidiMouthForm apiRoot={API_URL} setOutputSong={setOutputSongId} />\n            <hr />\n            {outputSongId.length > 0 && (\n\n                <Card>\n                    <Card.Header>\n                        <h3>Your song is ready!</h3>\n                    </Card.Header>\n                    <Card.Body>\n                        <ReactPlayer url={songUrl} config={{ file: { forceAudio: true } }} controls={true} \n                        height={50} width={300} />\n                    </Card.Body>\n\n                </Card>\n            )\n\n            }\n        </main>\n    );\n}\n\nexport default MidiMouth;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routes/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport {\n    BrowserRouter,\n    Routes,\n    Route\n} from \"react-router-dom\";\nimport MidiMouth from './routes/MidiMouth';\n\nReactDOM.render(\n    <Auth0Provider\n        // If you are using a custom domain with Auth0, the value of the domain property is \n        //the value of your custom domain instead of the value reflected in the \"Settings\" tab.\n        domain=\"dev-9c8pon97.us.auth0.com\"\n        clientId=\"cofJDIegnz1wWXwQiDA2Qda0lCQ4uKDL\"\n        redirectUri={window.location.origin}\n        audience=\"https://YOUR_DOMAIN/api/v2/\"\n        scope=\"read:current_user update:current_user_metadata\"\n    >\n        <BrowserRouter>\n            <Routes>\n                <Route path=\"/\" element={<App />} />\n                <Route path=\"midi-mouth\" element={<MidiMouth />} />\n            </Routes>\n        </BrowserRouter>\n\n    </Auth0Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}